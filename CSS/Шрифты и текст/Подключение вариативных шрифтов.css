✅
/* Подключение */

Директива @font-face в самом начале файла style.css. 

В самой директиве укажите:

font-display: swap; — чтобы браузер сначала показывал альтернативный шрифт, а потом заменял его, когда загрузит нужный.
Roboto-Flex-Variable в качестве названия семейства и локального шрифта.
Путь к файлу шрифта. В нашем случае ../fonts/Roboto-Flex-Variable.woff2.
Формат шрифта. Наш шрифт в формате woff2, но могут быть и другие: woff, ttf, eot или otf.


✏️ Пример написания: 


@font-face {
    font-family: Roboto-Flex-Variable;
    src:
      local('Roboto-Flex-Variable'),
      url(./fonts/Roboto-Flex-Variable.woff2) format('woff2 supports variations'),
      url(./fonts/Roboto-Flex-Variable.woff2) format('woff2-variations');
    font-display: swap;
}
  
  @font-face {
    font-family: Roboto-Serif-Variable;
    src:
      local('Roboto-Serif-Variable'),
      url(./fonts/Roboto-Serif-Variable.woff2)
      format('woff2 supports variations'),
      url(./fonts/Roboto-Serif-Variable.woff2) format('woff2-variations'); /*  фолбек с устаревшим форматом, чтобы всё работало в старых версиях браузеров: */
    font-display: swap;
}

body {
    font-family: Roboto-Flex-Variable, sans-serif;
}


✅
/* Минимальные и максимальные значения */

Можно при подключении шрифта задать минимальное и максимальное значение насыщенности или ширины символов, Так браузер будет знать, в каком диапазоне значений осей вы собираетесь работать.
В дальнейшем, если укажете font-weight: 100 при диапазоне насыщенности 400–1000, браузер поймёт, что вы ошиблись и установит ближайшее значение, поддерживаемое диапазоном. В нашем случае 400.

@font-face {
    font-display: swap;
    font-family: 'Roboto-Flex-Variable';
    src:
      local('Roboto-Flex-Variable'),
      url('../fonts/Roboto-Flex-Variable.woff2') format('woff2 supports variations'),
          url('../fonts/Roboto-Flex-Variable.woff2') format('woff2-variations');
      font-weight: [минимальное значение] [максимальное значение];
      font-stretch: [минимальное значение]% [максимальное значение]%;
}

✅
/* Поддержка старых браузеров */

Несмотря на хороший уровень поддержки вариативных шрифтов, иногда требуется поддерживать очень старые браузеры, в которых они не работают.

Вместо прямого перечисления лучше использовать метод прогрессивного улучшения через директиву @supports, Так вы будете уверены, что браузер загрузит только один из шрифтов и никогда не станет загружать оба шрифта вместе.

body {
    font-family: 'Roboto', sans-serif;
}

@supports (font-variation-settings: normal) {
    body {
        font-family: 'Roboto-Flex-Variable', sans-serif;
    }
}


✅
/* ШОРКАТ font-variation-settings */

Вместо того, чтобы указывать отдельные свойства:

.text {
    font-weight: 850;
    font-stretch: 110%;
      font-optical-sizing: 0;
}

Достаточно указать сокращённое свойство:

.text {
    font-variation-settings: 'wght' 850, 'wdth' 110, 'opsz' 0;
}




❗ Если имя оси повторяется несколько раз, последнее значение оси перезапишет первое.
❗ Если ось не поддерживается шрифтом, такой параметр игнорируется.
❗ Если значение оси больше или меньше предопределённого в шрифте диапазона, оно будет ограничено ближайшим значением, которое поддерживается шрифтом.
❗ Если вместо вариативного шрифта применится запасной шрифт, font-variation-settings не повлияет на его параметры, и стили к шрифту не применятся.
❗ Если нужно поменять значение одной оси, придётся повторить весь шорткат целиком. Каскад не работает для каждой оси по отдельности.


✏️ Пример написания с переменными:

/* Устанавливаем значения по умолчанию */
:root {
    --wdth: 100;
    --wght: 400;
}

/* Переопределяем нужные CSS-переменные */
.text_width_large {
    --wdth: 151;
}

.text_weight_bold {
    --wght: 900;
}

/* Применяем наши CSS-переменные */
.text_width_large,
.text_weight_bold {
    font-variation-settings: 'wdth' var(--wdth), 'wght' var(--wght);
} 


✅
/* Основные оси */


▶️font-weight -Отвечает за толщину символов. С её помощью удобно создавать визуальную иерархию заголовков или расставлять акценты в тексте.
▶️font-stretch - Отвечает за то, насколько узкими или широкими будут буквы, цифры и знаки
▶️font-style - Позволяет задать угол наклона текста. /* Свойство еще не работает, вместо него используюn: */
 font-variation-settings с указанием оси slnt и нужным градусом наклона.

 .heading {
    font-style: oblique -7deg;
}

▶️font-optical-sizing - зависимости от размера текста браузер автоматически изменяет высоту глифов и их уровень детализации, толщину обводки, межбуквенный интервал, ширину букв. 

есть два значения:
.auto — значение по умолчанию. Браузер будет автоматически изменять внешний вид глифа в зависимости от размера шрифта.
.none — отключает это поведение.

❗войство font-optical-sizing не поддерживает установку собственных числовых значений. Концепция заключается в том, что браузер автоматически высчитывает наиболее близкое значение к используемому значению размера шрифта. 

❗Если вы не доверяете браузеру, можете задать значения вручную через font-variation-settings, указав ось opsz с нужным значением.

.heading {
    font-variation-settings: 'opsz' 50;
}


Чаще всего встречаются эти оси:
.wght — насыщенность символа (weight), свойство font-weight.
.wdth — ширина символа (width), свойство font-stretch.
.slnt — наклон (slant), свойство font-style.
.opsz — оптический размер (optical size). Закреплена за свойством font-optical-sizing.

❗Вариативный шрифт необязательно имеет все перечисленные оси. Их наличие зависит от того, отрисовал их шрифтовой дизайнер или нет.


✅
/* Пользовательские оси */

.font-variation-settings — это единственный способ управлять пользовательскими осями.

❗Названия основных осей пишутся строчными буквами, а названия пользовательских — с заглавных❗ 