✅ 
/* Свойства 3D-трансформаций  */

🔶3D-трансформации создаются свойством .transform - в этом свойстве доступны некоторые предзаданные функции:

сдвиг — translate();
поворот — rotate();
масштабирование — scale();
скос — skew(). /* Не работает только скос. Скос — двухмерная трансформация. */

❗Задавать трансформации в трёхмерном пространстве проще всего, если описывать преобразование по каждой оси отдельно. 

✏️ Пример написания:

1️⃣Сдвиг на 20px по X, на 30% по Y и 10vh по Z.

.translate {
    transform: translateX(20px) translateY(30%) translateZ(10vh);
}

2️⃣Поворот на 90° по X, четверть оборота по оси Y и один радиан по оси Z.

.rotate {
    transform: rotateX(90deg) rotateY(0.25turn) rotateZ(1rad);
}

3️⃣Масштабирование на 1.5 по X, на 0.8 по Y и без масштабирования по Z.

.scale {
    transform: scaleX(1.5) scaleY(0.8) scaleZ(1);
}


✅ 
/* Перспектива */

🔶Перспектива — своеобразная эмуляция позиции наблюдателя относительно экрана. Вы можете смотреть на экран вблизи, а можете издалека. Если смотреть вблизи — элементы будут казаться большими, а издалека — маленькими.

❗Значения перспективы задают в положительных единицах измерения первой функцией в свойстве .transform

❗Чем больше значение перспективы, тем менее будут заметны эффекты трёхмерности.

✏️ Пример написания:

.block {
    transform: perspective(200px) rotateY(30deg);
}


✅ 
/* Задать общую перспективу на весь контейнер.  */

❗перспективу описывают свойством .perspective для контейнера, содержащего все элементы с трансформациями.

✏️ Пример написания:


.parent {
    perspective: 200px;
}

.parent .child {
    transform: rotateY(45deg);
}

❗На деле 3D-эффекты иногда нужны для контейнера, а иногда — для элементов. Поэтому нужно знать и про функции и про свойство трансформации.


✅ 
/* Точка фокуса преспективы */

❗Точку, в которую приходится фокус зрения, назначают для контейнера свойством perspective-origin
❗В него можно поместить значения по осям X и Y в пикселях или процентах от размеров экрана.
❗Можно использовать специальные слова: top, right, bottom, left и center.

✏️ Пример написания: /*  Такая точка фокуса будет прижата к правой границе браузера и сдвинута сверху на 40 пикселей. */
 
.parent {
    perspective: 400px;
    perspective-origin: 100% 40px;
}


✅ 
/* Точка фокуса преспективы ,  transform-origin  в 3D  */

🔶в 3D cвойство transform-origin отвечает за точку, вокруг которой происходит трансформация. 

❗По умолчанию  точка фокуса находится в центре элемента, который трансформируют.
❗Для изменения точки поворота нужен transform-origin
❗Его можно задавать в абсолютных или относительных единицах измерения. 
❗точка трансформации будет сдвигаться от начала координат элемента — левого верхнего угла.
❗Можно пользоваться специальными словами top, right, bottom, left и center. 
❗У transform-origin можно указывать два значения — первое сдвигает точку по оси X, второе — по оси Y. Но можно и три, если нужна ось Z. 

✏️ Пример написания:

transform-origin: left center;


✅ 
/* Обратная сторона карточки, backface-visibility. */

❗ При трансформации блока с текстом, текст отображается с другой стороны страницы.
❗CSS позволяет управлять видимостью оборотной стороны, но не её стилизацией. 

🔶backface-visibility - позволяет сделать задник невидимым.

У него два значения: 
visible - показывать задник, 
hidden - не показывать задник, 


✅ 
/*Вглубь, а не наружу,transform-style */

.transform-style - Контейнер, в который будут проникать элементы, может стать 3D-пространством. 

У свойства transform-style два значения 
flat-  ведёт себя знакомым вам способом — та самая стенка сзади. /* по умолчанию */
preserve-3d- создаст 3D-пространство внутри контейнера. 


✅
/* Сокращенные свойства */

➡️ функция translate3d() - принимает три значения: сдвиг по оси X, сдвиг по оси Y и сдвиг по оси Z.

✏️ Пример написания:

❗Шоркат

.block {
    transform: translate3d(30px, 40px, -50px);
}

❗ Вместо

.block {
    transform: translateX(30px) translateY(40px) translateZ(-50px);
}

❗Так как блоки в HTML плоские, значение translateZ в процентах бесполезно. Поэтому не нужно его задавать в процентах. От нуля толщины процента не взять.


➡️ функция scale3d() - объединяет в себе масштабирование по трём осям.

✏️ Пример написания:

❗Шоркат

.block {
    transform: scale3d(1.2, 1, 1.5);
}

❗ Вместо

.block {
    transform: scale3d(1.2, 1, 1.5);
}

❗Масштабирование по оси Z начинает хорошо работать, если задан сдвиг по оси Z и перспектива. В этом случае у элемента появляется пространство масштабирования.

❗ порядок трансформаций тут имеет значение. Если поставить сдвиг раньше масштабирования, работать не будет.


➡️Функция rotate3d() - принимает на вход четыре аргумента: координату вектора вращения по оси X, координату по оси Y, координату по оси Z и угол поворота.

✏️ Пример написания:

.block {
    transform: rotate3d(1, 1, 1, 45deg);
}

❗❗❗ Рекомендуем вам поворачивать объекты по отдельным осям индивидуальными функциями rotateX(), rotateY() и rotateZ()


✅
/* Матрица трансформаций в 3D */






1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: