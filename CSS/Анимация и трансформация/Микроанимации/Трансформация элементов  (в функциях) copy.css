✅
/* Анимация элементов*/

🔶 Свойство transform- отвечает за эфекты анимации элемментов.

❗ В качестве значений у свойства transform используются функции. 



▶️ scale() - отвечает за изменение масштаба элемента.Можно увеличить или уменьшить элемент.изменения не влияют на соседей. Они не сдвигаются и не страдают, страница не дёргается и не ломается.

❗Может принимать до двух аргументов — значений, указанных в скобках. 
❗Если значение указано одно, оно применится к обеим осям.
❗Первое повлияет на размер по строчной оси, а второе — на размер по блочной оси.
❗Существуют отдельные функции scaleX() и scaleY(), если нужно управлять отдельно каждой из осей. 
❗Изначальный масштаб элемента равен 1. 
❗Если указать значения от 0 до 1, элемент будет уменьшаться, а если от 1 до бесконечности — увеличиваться.
❗Указываем «1.1»=  То есть элемент увеличится на 10% от исходного размера. ❗Не указываются никакие единицы измерения.❗


✏️ Пример написания:

.card:hover {
    transform: scale(1.1)
}


▶️ rotate()  -  отвечает за поворот элемента.  В качестве аргумента мы указываем, на сколько должен повернуться элемент относительно своего текущего состояния.

.Единицы измерения функции:

deg- градусы (Полный круг — 360 градусов. Половина круга — 180 градусов. Четверть круга — 90 градусов.)
turn- повороты (Полный круг — 1 поворот, половина круга — 0.5 поворота, а четверть — 0.25 поворота.)
grad- грады

❗Можно использовать положительные или отрицательные значения без ограничений.
❗Если значение положительное, элемент поворачивается по часовой стрелке, а если отрицательное — против часовой.


✏️ Пример написания:

.card:hover .card-image {
    transform: rotate(5deg);
}



▶️ translate() - отвечает за смещение элемента. 

❗В качестве аргумента можно передать одно или два значения. 
❗Первое отвечает за горизонталь, а второе за вертикаль смещение.
❗Если значение в скобках только одно, то элемент сместится по горизонтали, а  вертикали при этом браузер подставит 0. 
❗Можно использовать любые единицы измерения. 
❗✔️При использовании процентов они считаются от размера самого элемента. 

✏️ Пример написания:

1.  
Сместить элемент с неизвестным размером на 100%. 
Таким образом в спокойном состоянии текст будет скрыт.

.card-content {
    margin-block-start: auto;
    padding: 25px;
    color: #fff;
    background-color: rgb(0 0 0 / 0.8);
    transform: translate(100%);
    transform: translateY(100%);
}
  
2.  
По наведению курсора смещение отменяется и он становится виден.

.card:hover .card-content {
    transform: translate(0);
    transform: translateY(0);
}



▶️ skew() - функции трансформаций, с ней элемент становится косым. 


✅
/* Прмиенение нескольких трансформаций */

🔶Чтобы применить к элементу несколько трансформаций, нужно задать все нужные функции через пробел для одного свойства 
.transform.


✏️ Пример написания:

.card {
    transform: rotate(15deg) scale(1.1) translateY(20%);
}

❗братить внимаение что порядок  перечисление функции иммент значение на конечно расположение элемента на странице.


✅
/* Свойсвта трансформации */

🔶 CSS-свойства для отдельных функций трансформаций, заменяют функции.

▶️translate() - Смещение мы указываем в любых единицах измерения расстояния: пиксели, проценты и так далее.
❗ Можно задать одно, два или три значения через пробел. Одно значение применяется к оси X, два значения влияют на X и Y, а при трёх значениях элемент смещается по всем трём осям.


▶️scale()- указывать положительное целое или дробное число от 0 до бесконечности. При этом изначальный масштаб элемента — 1.можно указать изменение масштаба в процентах. но лучше в ччислах.

❗ Можно задать одно, два или три значения через пробел. Одно значение изменит масштаб элемента по высоте и ширине, два значения отвечают за размер по строчной оси и по блочной оси, а третье значение влияет на изменения по оси Z.

▶️rotate() - Указываем значение в градусах или поворотах. Радианы и грады тоже допустимы.

❗Чтобы просто повернуть элемент по часовой или против часовой стрелки, задайте одно значение. 
❗3D-поворот, и тогда нужно указать, к какой конкретно оси относится заданное значение. 

✏️ Пример написания:

.box {
    rotate: x 45deg;
    rotate: y 90deg;
}


✏️ Пример написания  трансформациями на новый синтаксис:

🔷.Было 

.card {
    transform: rotate(15deg) scale(1.1) translateY(20%);
}

.card:hover {
    transform: rotate(15deg) scale(1.1) translateY(0);
} 


🔷.Стало 

.card {
    rotate: 15deg; 
    scale: 1.1; 
    translate: 0 20%;
}

.card:hover {
    translate: 0 0;
}


✅
/* Матрица трансформаций */

🔶 За матрицу трансформаций в CSS отвечают функции matrix() и matrix3d(). 

▶️matrix() - используется в качестве значения для свойства transform. Это шорткат для вообще всех возможных трансформаций. 

✏️ Пример написания:

matrix(a, b, c, d, tx, ty)


❗Есть четыре вида трансформаций: 
rotate() - поворот 
skew() -скоc 
scale() - масштабирование
translate() - сдвиг


❗ Значения tx и ty -c окращение от “translate X” и “translate Y” — сдвига по каждой оси. 
















1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻✏️
 