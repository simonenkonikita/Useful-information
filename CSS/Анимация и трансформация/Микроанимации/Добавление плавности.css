✅
/* Добавляем плавности элементам*/

🔶 Свойство transition- свойство-шорткат, с его помощью мы можем задавать сразу много значений для целого семейства свойств. Как правило, transition- используется именно в сокращённом виде.

🔶 В шорткат transition- входит четыре свойства (пишутся по порядку):

transition-property — свойство, к которому применится переход;
transition-duration — длительность перехода;
transition-delay — задержка перехода;
transition-timing-function — функция, которая определяет, как меняется стиль элемента с течением времени.

✏️ Пример написания:

.link-nice {
    transition: color 0.2s 0.5s ease;
}

❗ Можно расшифровать так: 1) меняй цвет текста 2) за полсекунды 3) с задержкой 4) значение по умолчанию, ускоряется к середине анимации, замедляется в конце;


➡️.Несколько свойст одновременно:

✏️ Пример написания:

.link-nice::after {
    transition: width 300ms, background-color 0.5s;
}


✅
/* Единицы измерения времени в CSS */

s -секунды (В одной секунде 1000 миллисекунд.)
ms -миллисекунды 


✅
/* функции времени. */

Основные ключевые значения:

ease- значение по умолчанию, ускоряется к середине анимации, замедляется в конце;
ease-in — начинается медленно, заканчивается быстро;
ease-out — начинается быстро, заканчивается медленно;
ease-in-out — медленно начинается и заканчивается, а в середине ускоряется;
linear- меняется с одинаковой скоростью.


✅
/* Кривая Безье */
аналоги, записанные при помощи функции cubic-bezier():

ease — cubic-bezier(0.25, 0.1, 0.25, 1.0);
ease-in — cubic-bezier(0.42, 0.0, 1.0, 1.0);
ease-out — cubic-bezier(0.0, 0.0, 0.58, 1.0);
ease-in-out — cubic-bezier(0.42, 0.0, 0.58, 1.0).



✅
/* функции времени - пошаговые функции */

🔴 список пошаговых функций:

⏩ step-start - анимация в самом начале прыгает в финальное состояние и там остаётся до конца.

⏩ step-end - элемент не меняется всё время анимации, а потом резко прыгает в финальное состояние.

⏩ steps().

❗Функция steps() принимает два параметра: количество шагов и направление шага. 
❗Обязательный параметр — количество шагов. Второй можно опустить.
❗Количество шагов необязательно должно совпадать с количеством кадров. Даже если в вашей анимации всего два кадра, вы можете указать и 5, и 10 шагов в этой функции.
❗Направление анимации, второй параметр,  похоже на поведение step-start и step-end. Каждый шаг либо применяется сразу, либо ждёт окончания отведённого ему времени. ❗По умолчанию, если второй параметр не указан, используется значение end.

✏️ Пример написания:


.circle {
    position: relative;
    border-radius: 50%;
    animation-fill-mode: forwards;
    animation-duration: 5s;
    inline-size: 35px;
    aspect-ratio: 1/1;
  }
  
  ._active .circle {
    animation-name: changes;
  }
  
  .circle1 {
    outline: 6px dotted #6fc1fd;
    outline-offset: -1px;
    background-color: #6fc1fd;
    animation-timing-function: step-start;
  }
  
  .circle2 {
    outline: 6px dashed #fdd331;
    outline-offset: -3px;
    background-color: #fdd331;
    animation-timing-function: step-end;
  }
  
  .circle3 {
    outline: 2px dotted #fd24af;
    outline-offset: 2px;
    background-color: #fd24af;
    animation-timing-function: steps(4);
  }
  
  .circle4 {
    outline: 7px dotted black;
    outline-offset: -6px;
    background-color: #80d994;
    animation-timing-function: steps(4, start);
  }
  
  @keyframes changes {
    from {
      left: 0;
    }
  
    to {
      left: 200px;
    }
}

✅
/* помощью функции плавности Linear(). */

Почитать 







1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻✏️
 