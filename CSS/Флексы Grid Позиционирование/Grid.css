.display: grid; - превратить элемент в грид-контейнер, Если элементу задано свойство display со значением grid, то такой элемент становится грид-контейнером. Дочерние элементы этого контейнера начинают подчиняться правилам грид-раскладки. Снаружи грид-контейнер ведёт себя как блок.

.display: inline-grid; - Практически аналогичное предыдущему значению — за тем исключением, что снаружи грид-контейнер, созданный с помощью inline-grid, будет вести себя как строчный элемент.


/* z-index */

Для управления близостью элементов используется свойство z-index. По умолчанию равен 0.

z-index не действует на элемент со свойством position: static или если свойство position вообще не задано. 
Из этого правила есть исключение: если элемент находится во flex- или grid-контейнере (у родителя задано display: flex или display: grid), то z-index сработает, даже когда позиция элемента — static.


/* Построение сеток */

grid-template-columns - Свойства, задающие размеры и количество колонок
grid-template-rows - Свойства, задающие размеры и количество рядов
Функция repeat() - тобы не писать каждый раз одно и то же значение для свойств grid-template-columns и grid-template-rows
/* вместо этого: */
grid-template-columns: 20% 20% 20% 20% 20%;
/* можно написать: */
grid-template-columns: repeat(5, 20%);


.container {
    display: grid;
    grid-template-columns: 190px 200px 270px;
    grid-template-rows: 150px 150px 100px;
} 


/* Отступы между ячейками */

column-gap - войство отвечающее за отступы между колонками
row-gap - войство отвечающее за отступы между строками
gap- шаркат для  column-gap и row-gap -свойство отвечающее за отступы между строками и колонками


/* Расположение элементов в грид-контейнере по линиям*/
У каждой линии с Grid есть свой порядковый номер. Мы можем использовать эту нумерацию, чтобы указать элементу, где ему начинаться, а где заканчиваться.

grid-column-start и grid-column-end — для вертикальных грид-линий;
grid-row-start и grid-row-end — для горизонтальных линий.

.block_size_big {
    grid-column-start: 1;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 6;
} 

grid-column - шоркат для вертикальных грид-линий;
grid-row - шоркат для горизонтальных линий.

.block {
    grid-row: 1; /*  Если указать только одно значение этому свойству, второе по умолчанию станет auto и будет охватывать одну ячейку: */
    grid-column: 2/4;
} 


/* Имена линиям */
Чтобы каждый раз не считать линии, им можно давать имена. Имя линии может быть любым, кроме ключевого слова span

grid-template-rows: [aside-start] 300px [aside-end]; /* Имена в [...] */

grid-row: aside-start / 4;


/* Расположение ячеек с помощью span */
Словом span указывают, какое количество строк или столбцов должен занимать элемент до или после какой-то линии. 

.Например:

.block {
    grid-column-start: 2;
    grid-column-end: span 2;
    grid-row-start: span 2;
    grid-row-end: 3;
} 


/* Грид-области grid-area*/

grid-template-areas - Свойство чтобы разделять грид-контейнер со строками и столбцами на области. Грид-область обязательно должна быть прямоугольником.

.Задаем области имя

.header {
    grid-area: header;
} 


.Указываем расположение областей в сетке. Каждую ячейку сетки необходимо заполнить, иначе свойство grid-template-areas не сработает. Если какую-то область нужно оставить пустой, вместо имени ставится точка или несколько точек.

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);
    grid-template-areas:
    "header header header"
    "news news aside"
    "promo promo aside"
    ". footer footer";
} 


/* Выравнивание сетки в грид-контейнере */

align-content - выравнивание всей сетки горизонтальной оси (по оси колонок)
justify-content - выравнивание всей сетки вертикальной оси (по оси строк)

.stretch (значение по умолчанию) — ряды растягиваются одинаково, так, чтобы занять всё доступное пространство родителя.
.flex-start / start — все ряды располагаются у начала поперечной оси. Первое значение не зависит от направления чтения текущего языка, в отличие от второго.
.flex-end / end — все ряды располагаются у конца поперечной оси. end «уважает» направление чтения текущего языка.
.center — ряды выравниваются по центру родителя.
.space-between — первый ряд прижимается к началу поперечной оси, последний — к концу поперечной оси, а остальные располагаются так, чтобы свободное пространство было поделено на отступы между ними равномерно.
.space-around — отступы у каждого ряда равнозначны отступам у любого другого ряда.
.space-evenly — отступы между рядами и от краёв родителя одинаковые.

place-content - щаркат свойств align-content и justify-content.


/* Выравнивание содержимого всех грид-областей */

justify-items - выравнивает элементы по направлению колонок
align-items — по направлению строк

.stretch - растянуть на всю ячейку
.start - прижать к началу ячейки
.end - прижать к концу ячейки
.center - расположить в центре ячейки

place-items - щаркат свойств align-items и justify-items.


/* Выравнивание содержимого внутри одной области */

justify-self - выравнивание по направлению колонок.
align-self — выравнивание по направлению строк. 

.stretch - растянуть на всю ячейку
.start - прижать к началу ячейки
.end - прижать к концу ячейки
.center - расположить в центре ячейки


/* Размеры неявных строк и колонок */
Неявные строки добавляются снизу, сразу после явных.

grid-auto-rows — для неявных строк. (управлние размерами) 
grid-auto-columns — для неявных столбцов. (управлние размерами) 

.Пример:

.container {
    display: grid;
    grid-template-rows: repeat(2, 100px);
    grid-template-columns: repeat(3, 160px);
    grid-auto-rows: 100px; /* или  grid-auto-rows: 50px 150px;  что бы строоки чередовались */ 
} 


grid-auto-flow - меняет значение добавления неявных срок на добавление неявных колонок:

grid-auto-flow: column; - что бы начать добавлять неявные колонки вместо строк
grid-auto-flow: row; - значение по умолчанию
grid-auto-flow: dense; - помогает заполнять пробелы в сетке, если они появляются из-за разных размеров элементов.
grid-auto-flow: row dense; - помогает заполнять пробелы в сетке, если они появляются из-за разных размеров элементов. меняя при этом добавление ячеек по строкам
grid-auto-flow: column dense; - помогает заполнять пробелы в сетке, если они появляются из-за разных размеров элементов. меняя при этом добавление ячеек по калонкам



/* ФУНКЦИИ И ДОП СВОЙСТВА ГРИДОВ */

/* Функция minmax() */
Элемент с таким размером растягивается и сжимается в пределах этих значений.
Значения параметров min и max можно задавать в *пикселях, *процентах, *фракциях. Кстати, *фракцию можно использовать только в качестве максимума. 

.container {
    display: grid;
    grid-template-columns: 1fr 1fr minmax(300px, 1fr); /* Первым в скобках пишется минимальный размер. */
} 


/* Значение max-content */
Если указать значение max-content, содержимое ячейки будет помещаться максимально свободно.

.container {
    display: grid;
    grid-template-columns: 1fr 1fr max-content;
} 


/* Значение min-content */
Для случаев, когда контента в ячейке может оказаться много. Если что-то можно перенести, то min-content это перенесёт. 

.container {
    display: grid;
    grid-template-columns: 1fr 1fr min-content;
} 


/* Шаркат к функии minmax(min-content, max-content)*/
Грид-область со значением minmax(min-content, max-content) будет ориентироваться на контент: он не ужмётся меньше содержимого, но и не займёт лишнее место, когда контента мало.

.container {
    display: grid;
    grid-template-columns: 1fr 1fr minmax(min-content, max-content);
} 


/* Значение auto */
Если значение auto используется как максимум, оно работает как значение max-content. Но если оно установлено как минимум, оно не ориентируется на количество контента и принимает самое большое значение свойств min-width или min-height, указанных для ячеек. 


/* Функция fit-content() */
Грид-область с функцией fit-content тоже ориентируется на количество контента, если minmax задаёт диапазон, то fit-content — не больше чем указанное значение.функция fit-content принимает размер в абсолютных и относительных единицах длины (px, em, rem, ch, vw и т. д.) или процентах. Но с ним нельзя использовать fr, так код не будет работать.

.container {
    display: grid;
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr fit-content(250px);
}


/* Функции minmax() и fit-content() */

.container {
    display: grid;
    grid-template-columns: 1fr 1fr minmax(200px, calc(1/3 * 1000px));;
} 

или 

.container {
    display: grid;
    grid-template-columns: 1fr 1fr minmax(clamp(200px, 30%, 8em), 1fr);
} 


/* краткая шпаргалка  */

.Удобно ограничивать размер грид-области со сложным контентом одной из двух функций: minmax() или fit-content(). Обе функции рассчитывают ширину грид-области исходя из количества контента в нём. Но работают с шириной немного по-разному.
..Функция minmax() буквально означает «не меньше и не больше». Особенно хорошо она работает в связке со свойствами min-content и max-content. 
.Функция fit-content() означает «не больше чем». В этом случае грид-область стремится сжаться под количество контента в ней.



/*Значения  auto-fill и auto-fit  */

Параметры auto-fill и auto-fit - свойства для оплередения браузером кооличества колонок которые стоит отобразить исходя из размера экрана.

grid-template-columns: repeat(/* auto-fill или auto-fit */, /* размер колонки */);

.Значение auto-fill - Все ячейки поместились в один ряд. стремится заполнить колонками всё доступное пространство. Когда элементы заканчиваются, auto-fill создаёт пустые колонки. Их можно увидеть через инспектор в браузере.

.container {
    display: grid;
    grid-template-columns: repeat(auto-fill, 300px);
}


.Значение auto-fit - заполняет всё доступное пространство колонками, но в отличие от auto-fill, если контента для новых колонок нет, оно схлопывает пустые ячейки, а свободное место отдаёт под заполненные. При этом пустые колонки всё ещё существуют, просто их ширина равна нулю. 

.container 
  display: grid;
  grid-template-columns: repeat(auto-fit, 300px);
} 


auto-fill и auto-fit с помощью функции minmax() -  Со значением auto-fit колонки растягиваются под доступное пространство, а дополнительные пустые столбцы схлопываются. Со значением auto-fill колонки сохраняют размер, а доступное пространство заполняют новые пустые треки.

.container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      /*или grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));*/
}