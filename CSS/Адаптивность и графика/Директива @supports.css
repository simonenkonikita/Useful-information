Через директиву @supports проверятся, поддерживает ли браузер указанное свойство или селектор. Если с поддержкой всё хорошо — применяется код, расположенный внутри неё. В противном случае, например, если браузер не поддерживает директиву @supports или указанные стили, — они полностью игнорируются.

@supports (color: red) {
    color: red;
} 

Директива @supports, как и медиазапросы, поддерживает операторы not, and, or и возможность их комбинировать:

@supports not (display: grid) {
    /* Стили для браузеров, не поддерживающих гриды */
}

@supports (color: red) and ((display: flex) or (display: grid)) {
    /* Стили для браузеров, поддерживающих красный цвет текста + флексы или гриды */
}

.Пример применения:

Например, мы хотим использовать свойство gap для задания отступов между элементами флекс-контейнера. Для начала надо указать фолбек:

.gallery {
    display: flex;
    flex-wrap: wrap;
}

/* фолбек для отступов */
.gallery__item {
    margin: 5px;
}

Затем при помощи @supports проверяется поддержка свойства gap, отключается предыдущее поведение и указывается новое:

.gallery {
    display: flex;
    flex-wrap: wrap;
}

/* фолбек для отступов */
.gallery__item {
    margin: 5px;
}

@supports (gap: 10px) {
    .gallery {
        gap: 10px; /* Новая логика отступов */
    }

    .gallery__item {
        margin: initial; /* Отключаем предыдущее поведение */
    }
}

Теперь браузеры, не поддерживающие gap у флексов, получат фолбек на margin, а браузеры последних версий для создания отступов будут использовать новые возможности.


/* Преимущества и Недостатки*/

Преимущества:
Хорошо сочетается с принципом: «Выпускать рано, выпускать часто». Ведь необязательно проходить все 3 этапа, можно выложить проект после второго, а третий запланировать на более подходящее время.
Безболезненные обновления.
Долгосрочная поддержка потребует меньших усилий.

Недостатки:
Сложно внедрять в легаси проекты, ведь потребуется переписать большое количество существующей кодовой базы.


/* Когда и какой подход использовать */

Когда и какой подход использовать решать вам, но мы дадим пару рекомендаций.
Постепенная деградация подойдёт, когда:
вы пришли на легаси-проект, и от вас требуется заниматься исключительно поддержкой. Здесь обычно нет времени, возможности или бюджета, чтобы переписать всё на прогрессивное улучшение.
перед вами проект-однодневка, который надо сделать и забыть.
Прогрессивное улучшение подойдёт, когда:
вы начинаете долгоиграющий проект. За время его жизни вы успеете несколько раз обновить код, попутно избавившись от старого.
вам нужно срочно протестировать идею, которая может потом выстрелить.