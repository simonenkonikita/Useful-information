.1
/* Выражения @container */

@container -  даёт понять дочерним элементам, где они находятся, а у нас появляется возможность обращаться к стилям контейнера и использовать новые единицы измерений. 

@container (inline-size >= 300px) {
    .element {
       /* Изменение стилей компонента */
    }
} 

Можно использовать свойства как физической модели, так и логической:

block-size — height
max-block-size — max-height
min-block-size — min-height
inline-size — width
max-inline-size — max-width
min-inline-size — min-widt

Пример написания @container :

@container (inline-size <= 850px) {
    .card {
      flex-direction: column;
    }
  
    .card__img {
      max-width: initial;
      border-block-end: 1px solid #000000;
    }
}


.2
/* Eдиницы измерения от контейнера: */

cqw — 1% от ширины контейнера. (Аналог vw от размера конетйнера)
cqh — 1% от высоты контейнера. (Аналог vh от размера конетйнера)
cqi — 1% от inline-size контейнера. (Аналог vi от размера конетйнера)
cqb — 1% от block-size контейнера. (Аналог vb от размера конетйнера)
cqmin — меньшее из cqi и cqb. (Аналог vmin от размера конетйнера)
cqmax — большее из cqi и cqb. (Аналог vmax от размера конетйнера)

 
.3 
/* Объявление блока контейнером @container */

.container-type: - объявить блок контейнером! При объявлении контейнера с помощью container-type под капотом автоматически  создаётся контекст, при котором дочерний компонент перестаёт влиять на элементы за пределами своего контейнера.

normal- значение по умолчанию. Создаёт контейнер, который не позволяет запрашивать размеры, но разрешает запрос стилей. Как запрашивать стили, подробнее расскажем в следующем уроке.
inline-size — создаёт контейнер, который позволяет запрашивать размер по строчному направлению оси.
size- создаёт контейнер, который позволяет запрашивать размер по любой оси: и строчной, и блочной. Обратите внимание, сейчас не существует способа создать контейнер, позволяющий запрашивать исключительно размер по блочной оси, вместо этого придется указывать значение size:

.block {
    container-type: size;
}

.element {
   /* стили компонента */
}

@container (block-size >= 300px) {
  .element {
     /* изменение стилей компонента */
  }
}


.4
/* Смена стилей через @container */

.style() - у контейнера можно запрашивать любые вычисленные стили. Для этого используется функция style().

@container style([свойство]: [значение свойства]) {
  /* Новые стили */
}

Пример написания @container :

@container (width <= 280px) and style(--bg-color: #ffc802) {
  .card__content {
    background-color: #ffffff;
  }
} 


.5
/* Обращение к контейнеру на несколько уровней выше.*/

Для этого необходимо дать контейнерам имя с помощью свойства container-name, а затем обратиться к нужному по имени.
.container-name: — необязательное свойство. 


.cards__item {
  container-type: inline-size;
  container-name: cards-item;
}

.card {
  container-type: inline-size;
  container-name: card;
}

.button {
 /* стили компонента */
}

@container cards-item (inline-size >= 300px) {
.button {
   /* изменение стилей */
}
}

При желании container-type и container-name можно записать в сокращённом виде, при этом имя обязательно должно идти первым:

.cards__item {
  container: cards-item / inline-size;
}