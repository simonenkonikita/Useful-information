/* Флексбоксы */

Один из эффективных и простых подходов — использование уже знакомого Flexbox. Чаще всего вы будете полагаться на flex-wrap, flex-grow и flex-shrink. Посмотрим, как это работает на практике. 

flex-wrap 
flex-grow: 1;
flex-shrink
flex-basis

.Пример:

.content {
    flex-basis: 500px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: end;
    box-sizing: border-box;
    padding: 50px;
    font-size: 18px;
    font-style: italic;
    line-height: 200%;
    background-color: #000;
  }
  
  .sidebar {
    flex-grow: 1;
    flex-basis: 250px;
    display: flex;
    flex-wrap: wrap;
    align-items: start;
    gap: 25px;
    box-sizing: border-box;
    padding: 50px;
    background-color: #000;
  }
  
  .description {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 100px;
    gap: 15px;
    font-size: 18px;
    line-height: 1.4;
}



/* Гриды */

Ещё один знакомый способ создания адаптивной вёрстки без медиазапросов — использование CSS Grid. Здесь важно запомнить ключевые слова, такие как repeat(), auto-fit, auto-fill, minmax() и min().

.Пример:

.cards__list {
    display: grid;
    gap: 25px;
    padding: 50px;
    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
    list-style-type: none;
}

.Баг с переполнением 
При ширине окна просмотра меньше 450px появляется баг с переполнением, при котором пропадает отступ справа. Это происходит потому, что ширина элемента становится больше контейнера. Исправьте это, обернув его минимальный размер 380px в дополнительную функцию min(), в качестве второго параметра передайте 100%.
По итогу должно получиться grid-template-columns: repeat(auto-fit, minmax(min(380px, 100%), 1fr));. С помощью функции min() происходит дополнительная проверка: если ширина контейнера меньше 380px, в качестве минимальной ширины колонок возьмётся 100% от его ширины, в противном случае 380px.


/* Математические функции */

В дополнение к CSS Grid и Flexbox можно использовать относительные единицы измерений, такие как проценты, свойства max- и min-width и функции calc(), min(), max(), minmax(), clamp().

.yo {
    --breakpoint: 500px;
    --breakpoint-simulation: (100vw - var(--breakpoint));
      position: fixed;
  }

Теперь напишем логику для изменения положения. По сути, мы собираемся переключать значения свойства bottom в зависимости от разницы вычислений переменной breakpoint-simulation,  для этого будет использоваться недавно изученная функция clamp().
Передайте ей параметры 0px, var(--breakpoint-simulation) * 1000, 86%, где:
0px — положение изображения при ширине окна просмотра меньше 500px,
86% — положение изображения при ширине окна просмотра больше 500px,
var(--breakpoint-simulation) * 1000 — управляет тем, какое именно из первых двух значений мы возьмём.
Если ширина окна просмотра 390px, то (390 - 500) * 1000 = -110000 — это намного меньше нашего минимального значения, следовательно, в bottom попадёт 0px. И наоборот, если ширина окна просмотра 768px, то (768 - 500) * 1000 = 268000 — это намного больше максимального значения, поэтому в bottom попадёт 86%.

Подобный трюк работает со многими свойствами, принимающими конкретное числовое значение, например padding, margin, border-width, translate.
  

/* Использлование padding-bottom*/

.Пример 

Сделать «резиновый» iframe с видео из YouTube.

❗ Вложить друг в друга два контейнера. Первый отвечает за ширину зоны с фреймом, а второй — организует его резиновую высоту через хак с относительным padding. 
Чтобы фрейм целиком вместился в своего родителя, он спозиционирован абсолютно в своём родителе, так мы можем задать ему ширину и высоту в 100%. 

➡️ Разметка:

<div class="yt-container">
      <div class="frame-box">
        <iframe
          src="https://www.youtube.com/embed/tqYWDGzhZKM"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
        ></iframe>
      </div>
</div>

➡️ Стили: 
    
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-width: 850px;
      min-height: 100vh;
      margin: 0;
      background-color: #fd24af;
    }
    
    .yt-container {
      width: 80%;
    }
    
    .frame-box {
     padding-bottom: 56.25%;
      position: relative;
    }
    
    iframe {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
}
    

