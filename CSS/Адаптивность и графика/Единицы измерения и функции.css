/* Единицы измерения в CSS */

.Абсолютные единицы измерения
Абсолютные единицы имеют фиксированный размер и не зависят от устройства или браузера пользователя. В css есть 6 абсолютных единиц: px, cm, mm, pt, pc, in.

Из абсолютных единиц чаще всего используют пиксели, так как они являются самыми понятными и удобными. Другие абсолютные единицы использовать не очень удобно, так как в итоге браузер пересчитывает их значения в пиксели, а размер пикселя может быть разным в зависимости от экрана.

px - пиксели (физические пиксели экрана)

cm - сантиметры (38px)

mm - миллиметры (3.8px)

pt - пункты (4/3px)

pc - пики (16px)

In - дюймы (96px)

.Относительные единицы измерения
Относительные единицы измерения более часто используются, они позволяют удобно создавать адаптивную верстку, хотя некоторые элементы все же удобнее задавать в абсолютных единицах. Как понятно из названия значения задаются относительно другой величины, более подробно рассмотрим дальше. В css есть 9 относительных единиц:

% - проценты. Если указать размер блока в процентах, то размер будет рассчитываться относительно родительского элемента. Если указывать размер текста, то он будет рассчитываться относительно текущего значения font-size.

em - значение относительно текущего размера шрифта. Чаще всего используется для задания размера шрифта. Например, если по умолчанию размер шрифта установлен 16px, значение 1em будет соответствовать этому же значению, 2em равно 32px.

rem - значение относительно размера шрифта (font-size) корневого элемента (<html>). Используется по аналогии с em.

ex - значение относительно высоты символа ‘x’

ch - значение относительно ширины символа ‘0’

vh - значение относительно высоты области просмотра (viewport), значения от 0 до 100

vw - значение относительно ширины области просмотра (viewport), значения от 0 до 100

vmin -  значение относительно меньшего значения vh или vw, значения от 0 до 100

vmax - значение относительно большего значения vh или vw, значения от 0 до 100

Небольшое пояснение для vmin / vmax. Если ширина области просмотра больше высоты, то vmin будет рассчитываться от высоты, а vmax от ширины. Например ширина области просмотра 1000px, а высота 400px, то значение 1vmin = 4px, 1vmax = 10px.

.Заключение
Css предлагает много вариантов задания размеров. Для разных случаев удобно использовать разные единицы измерения.

Для задания размеров блокам удобно использовать % или задавать значения в пикселях px для свойств max-width, min-width, чтобы было удобно делать адаптивную верстку. 

Для задания размера шрифтам часто используют em и rem. Например, чтобы увеличить шрифт для мобильных устройств, нужно будет изменить значение только у html элемента при использовании rem единиц.

Значения vh, vw, vmin, vmax удобно использовать, например, для модальных окон или если нужно чтобы секция сайта была на весь экран пользователя.

Значения ex, ch более экзотические и используются крайне редко.

/* Новые единицы */

vi — 1% размера окна просмотра по направлению оси выстраивания инлайновых, или строчных, элементов.

vb — 1% размера окна просмотра по направлению оси выстраивания блочных элементов.

.Единицы для обозначения большого окна просмотра имеют префикс lv- (lvw, lvh, lvi, lvb, lvmin, lvmax).
Единицы для обозначения малого окна просмотра имеют префикс sv- (svw, svh, svi, svb, svmin, svmax).

.Есть и динамические единицы. Они адаптируются к любому размеру экрана мобильного, а также учитывают такое поведение браузера, когда адресная строка и панели инструментов могут появляться и исчезать, например, при прокрутке контента. Эти единицы имеют префикс -dv (dvw, dvh, dvi, dvb, dvmin, dvmax).

https://web.dev/blog/viewport-units?hl=ru

/* Минимум и максимум */

min-width, min-height, max-width и max-height

.вопросы для понимания какие свойства применять 

нужно ответить на вопросы:

1.Насколько будут сжиматься элементы на странице? Элементы могут уменьшаться в ширину до какого-то предела сжатия окна браузера. Когда элементы достигнут этого предела, они могут либо перестать сжиматься (и появится скролл), либо изменить своё положение. Чтобы ограничить предел сжатия, используют min-width.

2.До какого предела может расширяться страница? Здесь могут быть разные варианты. Обычно «резиновая» вёрстка предусматривает максимальную ширину, больше которой элементы перестают растягиваться, а по бокам появляются поля (на веб-дизайнерском жаргоне — «уши»). Например, посмотрите, как ведёт себя страница сайта Нобелевской премии — в шапке и в основной зоне контента на широких мониторах. Если изображение Альфреда Нобеля тянется бесконечно, то зона контента на определённой ширине растягиваться перестаёт. Такое поведение обеспечивается свойством max-width в сочетании с горизонтальным выравниванием через margin: auto;.
Контент страницы перестаёт растягиваться на определённой ширине, и появляются «уши»

3.Как должны менять свой размер текстовые блоки? Помните, что высота текстовых элементов может меняться при сжатии браузера или увеличении объёма текста. С одной стороны, это значит, что самим текстовым элементам нужно задавать минимальную высоту вместо фиксированной, а с другой — родительские элементы тоже должны растягиваться при увеличении высоты контента. Задумывайтесь об этом каждый раз, когда пишете свойство height. В резиновой вёрстке лучше не ограничивать высоту, а использовать min-height.

4.Как элементы будут смотреться на очень больших экранах? Размеры могут оказаться слишком большими. Например, вы задали основной картинке статьи min-height: 80vh;. На большом экране или проекторе изображение станет огромным, а вам это не подходит. Не стесняйтесь в нужном месте использовать max-height.