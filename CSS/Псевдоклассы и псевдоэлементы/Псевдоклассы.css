✅
/* ПСЕВДОКЛАССЫ */

⚪ .Псевдоклассы- позволяют выбрать любой элемент на странице по его состоянию.

Примеры использования псевдоклассов:

✏️ Пример написания:

Пишем сначала блок правил для спокойного состояния элемента, а ниже пишем стили для селектора с псевдоклассом :hover:

button {
    border: 2px solid red;
    color: white;
    background-color: black;
}

button:hover {
    border: 2px solid black;
    background-color: red;
}

❗ Обязательно пишем их в таком порядке так: link → visited → hover → active.


✅
/* СТИЛЬ ПРИ НАВЕДЕНИИ   */

➡️ :link - отвечают за состояния ссылок. стилизует все ссылки, по которым ещё не переходили. Реально его используют довольно редко, потому что селектор ссылки a и a:link абсолютно идентичны, и стили применятся к одним и тем же элементам.

➡️ :visited - отвечают за состояния ссылок. отвечает за стили для ссылок, по которым уже переходили. Визуальная разница между посещённой и непосещённой ссылками помогает лучше ориентироваться. Особенно если ссылок много.

❗Возможности стилизации посещённых ссылок ограничены. Вы можете поменять значения только следующих свойств:
color,
background-color,
border-color,
outline-color,
column-rule-color,
fill,
stroke
❗Кроме того, браузер проигнорирует прозрачные (transparent) или полупрозрачные (rgb с альфа-каналом) цвета. 

➡️ :hover — даёт возможность изменять стили элемента по наведению курсора. 

✏️ Пример написания:

Пишем сначала блок правил для спокойного состояния элемента, а ниже пишем стили для селектора с псевдоклассом :hover:

button {
    border: 2px solid red;
    color: white;
    background-color: black;
}

button:hover {
    border: 2px solid black;
    background-color: red;
}

➡️ :active — применяется к элементам, когда они находятся в активном состоянии (например, при нажатии на кнопку или ссылку).


✅
/* ДЛЯ ФОКУСА */

➡️ :focus — применяется к элементам, которые находятся в фокусе (обычно при навигации с помощью клавиатуры и клавиши TAB, гно аботает и с мышки).

✏️ Пример написания:

Зададим элементам в фокусе намеренно преувеличенную обводку для наглядности.

button:focus {
    outline: 15px solid lightpink;
}

➡️:focus-visible - меняет стили элемента только при навигации с клавиатуры.

✏️ Пример написания:

button:focus {
    outline: none;
}
  
  button:focus-visible {
    border-color: rebeccapurple;
    color: palevioletred;
} 

❗ Внимание, сперва сбросили стили для :focus, а потом задали для :focus-visible.

➡️:focus-within - задаёт стили не только для самого элемента в фокусе, но и для родительского контейнера, внутри которого есть элемент в фокусе.

❗ К примеру форма с полем ввода <input> и кнопкой <button>. Фокусы будут не только у элементов, но и у всей формы. 

❗Причём элементы в фокусе не обязательно должны быть прямыми потомками элемента с :focus-within. Важно только, чтобы они были вложенными. 

✏️ Пример написания:

form:focus-within {
    background-color: #c4c4c4;
}

input:focus-within,
button:focus-within {
    outline: 5px solid #fd24af;
}


✅
/* ПОДСЧЕТ ЭЛЕМЕНТОВ */

В CSS существуют псевдоклассы, позволяющие посчитать элементы. 

❗ Важный момент: этот псевдокласс (и любые его вариации) нужно применять к элементу, который хотим посчитать, а не к родителю.

➡️ :nth-child() - считает всех детей (элементы) внутри родителя.

Внутри круглых скобок пишется формула, по которой будем считать элементы или номер конкретного элемента.

li:nth-child(5) - номер элемента

li:nth-child(3n) - 

n- пе ременная-счётчик, которая постепенно меняется от 0 до числа, равного количеству элементов.
even- чтобы выбрать все чётные элементы используют слово 
odd- для нечётных 

❗При положительном результате вычисления счёт ведётся от начала до конца, а при отрицательном — от конца в начало.

❗Можно явно начать считать с конца, используя :nth-last-child().

❗Можно использовать сложение и вычитание. Например, формула 2n+3 выберет каждый второй элемент, начиная с третьего.

✏️ Пример написания:

Поменяем у каждого второго (чётного) элемента правый отступ на левый. 

:nth-child(even) {
    margin-right: 0;
    margin-left: 100px;
}


✏️ Пример написания:

Cбросить отступ у первого или последнего элемента.


:first-child {
    margin: 0;
}



➡️ :nth-of-type() - считает только однотипные элементы,
точно такой же синтаксис, ключевые слова, отдельные производные для первого и последнего элементов как у :nth-child()

✏️ Пример написания:

<section>
    <h1>Не имей сто рублей</h1>
    <p>А имей сто друзей</p>
    <button>+100 друзей</button>
    <button>+100 рублей</button>
</section>

button:first-of-type {
    color: #fd24af;
}


✅
/* ИСКЛЮЧЕНИЕ ЭЛЕМЕНТОВ */

➡️ :not() - псевдокласс для исключения. 

Внутри круглых скобок пишем селектор, по которому нужно исключить элементы из выборки. Можем писать любые селекторы, включая другие псевдоклассы. 

p:not(.text, .hint, .description)

✏️ Пример написания:

<section>
    <h2 class="text title">Заголовок секции</h2>

    <p class="text">Однажды, в студёную зимнюю пору…</p>
</section>

.text:not(h2) { … } - Стили при таком селекторе применятся только к абзацу текста.

✏️ Пример написания:

Зададим правые отступы в 60 пикселей всем пунктам списка, кроме последнего.

❗ Используется там, где не получается использовать gap. 

li:not(:last-child) {
    margin-right: 60px;
}
  
❗ нельзя вкладывать один :not() в другой;
❗ нельзя внутрь круглых скобок вкладывать псевдоэлементы.


✅
/* ИЗМЕНЕНИЕ РОДИТЕЛЯ ПРИ НАЛИЧИИ ДОЧЕРНЕГО ЭЛЕМЕНТА ВНУТРИ */

:has() - позволяет  изменить стили родителя, при условии, что внутри есть определённый дочерний элемент. Можно добавить к селектору родителя и в скобках указать, какого ребёнка искать. Если такой ребёнок будет найден, то стили из правила будут применяться к селектору перед :has().

❗ Сработает для любого уровня вложенности.

✏️ Пример написания:

.card:has(.label) {
    border-color: #5f0dee;
} 

❗ Сейчас он поддерживается в большинстве современных браузеров, но ещё не во всех.