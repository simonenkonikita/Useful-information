✅
/* Функции */

🔶Функция — именованная часть кода. Она позволяет описать участок кода в одном месте и затем обращаться к нему из другого. Это структурирует код и делает его более читаемым. Но главное: функции позволяют использовать один и тот же код повторно.

function - объявить функцию, пишут ключевое слово function, имя функции с круглыми скобками, а затем — её тело внутри фигурных скобок:

function имяФункции() {
    // тело функции
}

✏️ Пример написания:

function consoleKitten() {
    let a = '  Λ _ Λ';
    let b = ' (=චᆽච=)==∫';
    let c = '   ˉ ˉ   ˉ ˉ';
  
    console.log(a); 
    console.log(b); 
    console.log(c);
}

Что бы вызвать функцию. Для этого пишут её имя и затем ставят круглые скобки:

consoleKitten();


✅
/* Параметры функции */

🔶Параметры — переменные, которыми может пользоваться только сама функция. 

Объявим функцию keepScore, /* любое название */ 
Она принимает два параметра — ours и theirs /* Любоет назвыание */

✏️ Пример написания: (Объявим функцию keepScore, которая сообщает итог матча. Она принимает два параметра — ours и theirs. Это число голов, забитое «нашими» и соперником.)

function keepScore(ours, theirs) {
    // Проверим, забили наши больше голов или нет:
  if (ours > theirs) {
        console.log('Выиграли! 😃 Счёт ' + ours + ':' + theirs);

    // Если наши забили не больше голов,
    // то может столько же? Проверим:
  } else if (ours === theirs) {
        console.log('Ничья. 😐 Счёт ' + ours + ':' + theirs);

    // Если два предыдущих условия не выполнены,
    // стало быть, наши забили меньше голов :(
  } else {
        console.log('Продули... 😢 Счёт ' + ours + ':' + theirs);
    }
}

Результат можно указать прямо в коде вызова:

keepScore(10, 8);
// функция keepScore подставит вместо переменной ours значение 10,
// а вместо theirs — значение 8. Затем выполнит все проверки и выдаст результат:
// 'Выиграли! 😃 Счёт 10:8'

При вызове функции можно передать ей как параметры значения переменных. Для этого параметры перечисляют внутри круглых скобок при вызове:

let a = 10; 
let b = 8;

keepScore(a, b);


✅
/* Возвращаемое значение */

🔶Возвращаемые значения указывает оператор return:

✏️ Пример написания: 

function sayHello(name) {
    // Преобразуем входные данные
  let greeting = 'Привет, ' + name;
    // Возвращаем результат
  return greeting;    
}

let alisaGreeting = sayHello('Алиса');

console.log(alisaGreeting); // "Привет, Алиса"


❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗❗
✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
/* Дополнительно: поднятие переменных и функций */

В уроке о функциональных выражениях мы упомянули, что функцию, созданную через объявление функции, можно вызвать до объявления:

double(2); // 4

function double() {
  return num * 2;
} 
Это возможно, потому что движок выполняет код не построчно сверху вниз, он сначала его компилирует, а лишь затем интерпретирует. 
Компиляция проходит довольно сложно. Для нас важно, что в этом процессе происходят две вещи:
сначала движок найдёт все объявления функций и объявит их;
затем найдёт все переменные, объявленные через var, объявит их и присвоит каждой значение undefined.
Объявление функций и переменных через var произойдёт в первую очередь. Это называется «поднятие»:

console.log(a); // undefined — объявление а поднялось, поэтому ошибки нет

var a = 2;

console.log(a); // 2 
Переменные, объявленные через const и let, а также функции, созданные через функциональные выражения, не поднимаются.
О поднятии функций и переменных вас могут спросить на собеседованиях, поэтому это важно знать. При этом для работы достаточно помнить, что объявленные функции умеют всплывать, и следить, чтобы они не были беспорядочно разбросаны в коде. А var не пользуйтесь вовсе.




1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: