✅
/* Аргументы по умолчанию*/

❗Параметр по умолчанию может принимать любое значение: число, строку, объект, функцию. Это значение будет присвоено параметру, если аргумент не передан или равен undefined.

❗Значением одного параметра функции даже может быть другой её параметр:

❗сервер может вернуть вместо каких-то необязательных данных, например отчества и даты рождения пользователя, undefined. Тут как раз и пригодятся дефолтные значения. 

❗Когда вы работаете в локальной экосистеме, где вы можете предусмотреть все неожиданные сюрпризы — смысла от дефолтных значений нет. Как только вы начинаете работать с серверными данными — значения по умолчанию очень кстати.

✏️ Пример написания:

function makeBeastArray(a = 'Коала', b = 'Вомбат', c = 'Ленивец') {
    return [a, b, c];
}


✅
/* Функции с неопределённым числом аргументов*/

🔶В ES6 появился новый оператор: ... (три точки). В зависимости от контекста применения и ожидаемой функциональности эти три точки ... называют либо spread, либо rest.  В разных ситуациях он ведёт себя по-разному. В этом уроке расскажем, что делает этот оператор при работе с функциями.

1️⃣При вызове функции — разбивает массив

🔶Оператором spread можно «разложить» массив в отдельные аргументы функции. Например, метод Math.max принимает на вход сколько угодно чисел и возвращает наибольшее из них. Оператор spread позволяет передать такой функции массив, сделав из него отдельные аргументы:

const nums = [4, 8, 15, 16, 23, 42];

/* Оператор spread разложит массив на отдельные
аргументы: 4, 8, 15 и так далее */

Math.max(...nums); // 42


2️⃣При объявлении функции — собирает аргументы в массив

🔶Второе назначение оператора ... — rest-параметры. Они выполняют действие, обратное оператору spread: собирают отдельные параметры функции в массив:

function consoleDogs(firstDog, ...otherDogs) {
    console.log(`Первый: ${firstDog}`);
    console.log(`Остальные: ${otherDogs}`);
  }
  
  consoleDogs('Спаниель', 'Овчарка', 'Борзая', 'Метис');
  
  /* В консоль будет выведено:
  
    Первый: Спаниель
    Остальные: ['Овчарка', 'Борзая', 'Метис']
*/

❗❗❗ rest-параметр всегда стоит в конце. Такой код приведёт к ошибке:

function consoleDogs(...dogs, dog1) {
    dogs.forEach(dog => {
      console.log(dog);
    });
  }
  
  consoleDogs('Спаниель', 'Овчарка', 'Борзая', 'Метис');
  
// SyntaxError: Rest parameter must be last formal parameter



✅
/* Старый код. Переменная arguments */

🔶В старом коде, до появления оператора spread, можно встретить другой способ работы с такими функциями — переменную arguments.

Внутри любой функции, кроме стрелочной, доступна переменная arguments. Она создаётся автоматически. Это псевдомассив всех аргументов, которые были переданы функции:

function gimmeSomeArguments() {
    console.log(arguments);
  }
  
  gimmeSomeArguments(1, 2); // [1, 2]
gimmeSomeArguments('a', 'b', 'c', 'd', 'e'); // ['a','b', 'c', 'd', 'e']





1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: