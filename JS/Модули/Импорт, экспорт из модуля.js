✅
/* Концепция IIFE ============================================*/

🔶IIFE — функция, все переменные, объявленные внутри неё, не видны снаружи. Если обернуть весь код в IIFE, можно полностью избавиться от глобальных переменных в нашем коде.

✏️ Пример написания:

(function () { /* IIFE — функция */
  const button = document.querySelector('button');

  function handleClick(evt) {
    // код обработки клика
  }

  button.addEventListener('click', handleClick);
})(); /* () - конец  IIFE — функции*/

Теперь в коде нет глобальных переменных, и если другой разработчик тоже решит воспользоваться переменной button, это никак не повлияет ни на его код, ни на ваш.


✅
/* Инкапсуляция ==============================================*/

🔶Инкапсуляция - способ разграничить код  — сделать так, чтобы одна функциональность не затрагивала другую.

✏️ Пример написания:

// Chart — модуль
const Chart = (function() {
  // локальные переменные, они не видны снаружи
  const data = [];
    
  // публичные методы, они будут доступны в объекте Chart
    return {
        render: function (data) { /* ... */ },
        setData: function (data) { /* ... */ }
    };
}()); // IIFE возвращает объект

Chart.render([[0,12], [1,22], [3,18]]);


✅
/* Подключение и использование модуля ========================*/

🔶Модуль — обычно отдельный файл с кодом, фрагмент программы, который реализует часть её функциональности.

➡️Подключение модуля:

Браузер должен понять, что на сайте используются модули. Для этого при подключении скриптов нужно задать значение module атрибуту type:

<script type="module" src="script-01.js"></script>
<script type="module" src="script-02.js"></script>


✅➡️Экспорт из модуля (отдельные переменные и функции этого модуля нужно сделать доступными для подключения в других файлах — экспортировать их, перед переменной, функцией или классом, которые нужно экспортировать, добавляют директиву export):

// script-01.js

export const str = 'Я переменная из модуля script-01.js';

export function myFunc() {
  console.log('Я функция из модуля script-01.js');
}


✅➡️Импорт в модуль (Функции или классы модуля нужно получить внутри другого модуля. Для этого есть директива import, которая позволяет обращаться к переменным в других файлах:):

// script-02.js

// импортируем переменную и функцию по их именам
import { str, myFunc } from './script-01.js';

// теперь их можно использовать

console.log(str); // "Я переменная из модуля script-01.js"
myFunc(); // "Я функция из модуля script-01.js"


❗❗❗Чтобы всё заработало, нужно установить локальный сервер, как вы делали в теме про Webpack, иначе файлы не подключатся, а в консоль повалятся ошибки.❗❗❗


✅
/*Экспорт в момент создания ==================================*/

Переменные, функции и классы можно экспортировать в момент создания.

export let str = 'Я буду на улице';


✅
/* Экспорт после создания ====================================*/

Можно экспортировать несколько переменных и функций сразу.

export { array, arrSquared }; 


✅
/* Экспорт с другим именем: директива export as ==============*/

Переменные и функции можно переименовывать при экспорте, чтобы обращаться к методам модуля по новому имени:

export { array as arr, arrSquared as sq }; 


✅
/* Импорт с другим именем: директива import as ==============*/

Длинные имена модулей можно сокращать и при импорте:

import { array as arr, arrSquared as sq } from './data.js'


✅
/* Директива import ==========================================*/

Импортировать объекты тоже можно пачками. Переменные, которые добавляются в модуль, нужно перечислить через запятую в фигурных скобках:

// index.js

// импорт нескольких переменных из файла data.js
import { array, arrSquared } from './data.js'

console.log(array); // [1, 2, 3]
console.log(arrSquared); // [1, 4, 9] 


Если импортировать нужно всё, что экспортирует модуль, имена объектов можно не перечислять, а просто поставить *, Но лучше не импортировать через *. Такой код сложнее читать: не видно, что конкретно импортируется из файла data.js.:

// index.js
import * as data from './data.js';

// из файла data.js будет импортировано всё, что из него экспортируется

console.log(data.array); // [1, 2, 3]
console.log(data.arrSquared); // [1, 4, 9] 


✅
/* Экспорт и импорт по умолчанию =============================*/

Из модуля можно возвращать одно или несколько значений. Если нужно экспортировать один класс или функцию, лучше использовать экспорт по умолчанию.

Тогда после директивы export пишут default, а дальше — значение, которое нужно экспортировать.
Отличие импорта по умолчанию — фигурные скобки не ставятся:

export default function renderItems() {
  // код функции
}

import renderItems from './render-items.js';

renderItems(); 

Здесь не важно, как называется функция в файле экспорта. Она может быть вообще анонимной, что невозможно при обычном экспорте. При экспорте по умолчанию её имя не играет роли:

// render-items.js
export default function render() {
  // ...
}

// song.js
export default class {
  constructor() { }
}

// data.js
export default [12, 22, 31];

Имена дают экспортированным данным позже, уже при импорте:

import renderItems from './render-items.js';
import Song from './song.js';
import someArr from './data.js';



✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
/*========================= ШПАРГАЛКА ========================*/


Виды экспорта:
export default — по умолчанию. Такой экспорт может быть только один в файле модуля;
export const array = [1, 2, 3] — именованный экспорт. В файле их может быть несколько;
export { dog, cat } — сразу несколько сущностей можно экспортировать после их объявления.

Виды импорта:
import { array } from './data.js' — с именем сущности;
import { array as arr } from './data.js' — с переименованием сущности;
import data from './data.js' — по умолчанию. Фигурные скобки не нужны, имя даётся в момент импорта;
import * — всего содержимого сразу. Но так лучше не делать.






























1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: