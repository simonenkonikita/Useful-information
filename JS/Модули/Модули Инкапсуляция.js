✅
/* Концепция IIFE ============================================*/

🔶IIFE — функция, все переменные, объявленные внутри неё, не видны снаружи. Если обернуть весь код в IIFE, можно полностью избавиться от глобальных переменных в нашем коде.

✏️ Пример написания:

(function () { /* IIFE — функция */
  const button = document.querySelector('button');

  function handleClick(evt) {
    // код обработки клика
  }

  button.addEventListener('click', handleClick);
})(); /* () - конец  IIFE — функции*/

Теперь в коде нет глобальных переменных, и если другой разработчик тоже решит воспользоваться переменной button, это никак не повлияет ни на его код, ни на ваш.


✅
/* Инкапсуляция ==============================================*/

🔶Инкапсуляция - способ разграничить код  — сделать так, чтобы одна функциональность не затрагивала другую.

✏️ Пример написания:

// Chart — модуль
const Chart = (function() {
  // локальные переменные, они не видны снаружи
  const data = [];
    
  // публичные методы, они будут доступны в объекте Chart
    return {
        render: function (data) { /* ... */ },
        setData: function (data) { /* ... */ }
    };
}()); // IIFE возвращает объект

Chart.render([[0,12], [1,22], [3,18]]);


✅
/* Подключение и использование модуля ========================*/

🔶Модуль — обычно отдельный файл с кодом, фрагмент программы, который реализует часть её функциональности.

➡️Подключение модуля:

Браузер должен понять, что на сайте используются модули. Для этого при подключении скриптов нужно задать значение module атрибуту type:

<script type="module" src="script-01.js"></script>
<script type="module" src="script-02.js"></script>


✅
/* Область видимости =========================================*/

У модуля своя область видимости. Он содержит локальные переменные и функции, которые не загрязняют глобальную область. Но если они нужны где-то снаружи, их придётся экспортировать:


/* // constants.js */

export const numbers = [2, 3, 5];


/* // index.js */

import { numbers } from './constants.js';

const doubledNumbers = numbers.map(number => number * 2);

console.log(doubledNumbers); // [4, 6, 10]


/* <!-- index.html --> */

<script type="module" src="index.js"></script>
<script type="module" src="constants.js"></script>

<script>
  console.log(numbers); // ошибка — такой переменной в глобальной области нет
  console.log(doubledNumbers); // и такой тоже нет
</script>


✅
/* Старые браузеры ===========================================*/

В старых браузерах атрибута type="module" не существует. Поэтому если открыть сайт в браузере, который не поддерживает модули, JavaScript вообще не будет подключён.

Это можно обойти так: пишут отдельный код для старых браузеров и подключают отдельно. То есть дописывают ещё один тег <script>, а в его атрибут type записывают значение "nomodule".

<!-- этот модуль загрузится, если браузер современный -->
<script type="module"></script>
<!-- этот модуль загрузится, если браузер старый -->
<script type="nomodule"></script>

Но так поступают редко. Чаще делают так, как мы разбирали в прошлой теме, — используют сборку.


✅
/* Модули — после отрисовки +=================================*/

Модули всегда подключаются к странице после отрисовки. Поэтому неважно, где вы их подключаете — в начале или в конце файла:

<script>
  console.log(document.querySelector('input')); // null

  /* без модулей такое не сработает, потому что поле ввода
  объявлено в коде ниже, а значит, мы пока не можем работать с ним */
</script>

<script type="module">
  console.log(document.querySelector('input')); // <input> 

  /* при модульном подходе таких проблем нет */
</script>

<input type="text"></input>

Но мы всегда подключаем скрипты в конце body, поэтому вы вряд ли столкнётесь с такой проблемой.













1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: