✅
/* Перебор массива. Методы forEach и map */

🔶У методов схожая логика: они перебирают массив и выполняют для каждого элемента свой код.

🔶Метод forEach нужен, когда мы хотим просто пройтись по массиву и для каждого элемента что-то сделать. 

Например, вывести твиты в консоль:

const tweets = [
  'Какой-то странный тред',
  'Твит, адресованный Илону Маску',
  'Ответ на инфоповод'
];

tweets.forEach(function (tweet) {
    console.log(tweet);
});

/*
  "Какой-то странный тред"
  "Твит, адресованный Илону Маску"
  "Ответ на инфоповод"
*/

🔶Метод map нужен, когда мы хотим создать новый массив из старого и преобразовать его элементы.

const tweets = [
  {
  user: '@elonmusk',
  date: '16 марта 2019 года',
  text: "I'm from South Africa."
},
  {
  user: '@realDonaldTrump',
   date: '24 марта 2019 года',
  text: 'Good Morning, Have A Great Day!'
},
  {
  user: '@BillGates',
  date: '24 марта 2019 года',
  text: 'I never ate apple in my life'
}
];

const tweetsTextOnly = tweets.map(function (el) {
  return el.text;
});

tweetsTextOnly.forEach(function (el) {
  console.log(el);
});

/*
I'm from South Africa.
Good Morning, Have A Great Day!
I never ate apple in my life
*/


✅
/* Обход массива: метод forEach */

🔶Метод forEach нужен для обхода массива. В качестве аргумента forEach принимает функцию. Она будет вызвана на каждом элементе массива поочерёдно:

const how = ['быстрее', 'выше', 'сильнее'];

how.forEach(function (item) {
    console.log(item + '.');
});

/*
  быстрее.
  выше.
  сильнее.
*/

❗Методу forEach мы передали функцию. forEach вызовет её столько раз, сколько элементов в массиве how. При каждом вызове forEach передаёт функции текущий элемент массива в качестве аргумента. Поэтому в передаваемой нами функции item — это текущий элемент массива. Параметр item можно назвать и по-другому. Но лучше сделать так, чтобы название отражало содержание.

❗Метод  forEach удобно использовать для работы с массивоподобными объектами. Например, с NodeList. Частая задача — пройтись по нескольким DOM элементам, вызвав для каждого из них функцию:

const elements = document.querySelectorAll('.text');

elements.forEach((item) => {
   item.classList.add('text_is-active');
});

🔶Метод forEach — более удобная для работы с массивом версия цикла for:

const how = ['быстрее', 'выше', 'сильнее'];

for (let i = 0; i < how.length; i += 1) {
    console.log(how[i] + '.');
}

❗❗❗// Этот цикл работает аналогично методу:

const how = ['быстрее', 'выше', 'сильнее'];

how.forEach(function (item) {
    console.log(item + '.');
});

/*
  быстрее.
  выше.
  сильнее.
*/

❗Но с forEach нельзя использовать директивы continue и break. Поэтому метод не используют, когда нужно прервать выполнение цикла каким-то условием.



✅
/* Создание одного массива из другого: метод map */

🔶Метод map создаёт новый массив на основе существующего. В качестве аргумента map, как и forEach, принимает функцию. Эта функция должна вернуть значение, которое станет элементом нового массива.

const firstArr = [0, 1, 2, 3, 4];

const secondArr = firstArr.map(function (item) { // Берём каждый элемент массива
  return item * item; // Возводим каждый элемент в квадрат
}); 

console.log(secondArr); // [0, 1, 4, 9, 16]

❗Результат работы функции — то, что указано после ключевого слова return. Если не прописать return, функция сработает, но вернёт undefined.

❗Метод map нельзя применить к массивоподобным объектам. Если попытаться вызвать код с NodeList из примера с forEach — вылезет ошибка: / TypeError: elements.map is not a function // потому что у elements нет метода map 

❗Превратить массивоподобный объект в полноценный массив используется метод - Array.from

❗Метод map удобно использовать в тех случаях, когда нужно сохранить исходный массив:

const elements = document.querySelectorAll('.text');
const elementsArr = Array.from(elements);

const newArr = elementsArr.map((item) => {
    item.classList.add('text_is-active');
});













1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: