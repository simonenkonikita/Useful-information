✅
/* Добавление последнего элемента: метод push */

🔶Метод push добавляет переданные ему аргументы в конец массива:

const emeraldCityHeroes = ['Лев', 'Дровосек', 'Страшила'];
emeraldCityHeroes.push('Элли', 'Тотошка');

console.log(emeraldCityHeroes);

// ["Лев", "Дровосек", "Страшила", "Элли", "Тотошка"]


✅
/* Удаление последнего элемента: метод pop */

🔶Метод pop удаляет последний элемент массива. Он не принимает аргументы — только возвращает значение удалённого элемента. Если массив пуст, pop вернёт undefined:

const insects = ['Бабочка', 'Мотылёк', 'Божья коровка', 'Комар'];

console.log(insects.pop()); // "Комар"
console.log(insects); // ["Бабочка", "Мотылёк", "Божья коровка"]


✅
/* Удаление первого элемента: метод shift */

🔶Метод shift удаляет первый элемент массива. Исходный массив при этом изменится:

const italyCities = ['Помпеи', 'Рим', 'Неаполь'];

const volcanoEruption = italyCities.shift();

// метод shift() возвращает удалённый элемент
console.log(volcanoEruption); // "Помпеи"

// массив остался без первого элемента
console.log(italyCities); // ["Рим", "Неаполь"]

❗Если массив изначально пустой, вернётся undefined.


✅
/* Добавление элемента в начало массива: метод unshift */

🔶Метод unshift добавляет элементы в начало массива. Их передают через запятую:

const queue = ['Рабочие', 'Школьники', 'Студенты'];

queue.unshift('Пенсионеры', 'Инвалиды');

console.log(queue);

// ["Пенсионеры", "Инвалиды", "Рабочие", "Школьники", "Студенты"]

🔶Метод unshift изменит исходный массив и напишет, сколько элементов в новом массиве:

const queue = ["Пенсионеры", "Инвалиды", "Рабочие", "Школьники", "Студенты"];

console.log(queue.length); // 5
console.log(queue.unshift('Мне только спросить')); // 6

❗❗❗Методы shift и unshift используют реже, чем их собратья pop и push. Работать с первым элементом затратнее, чем с последним. Для этого нужно перезаписать массив целиком: первый элемент сделать вторым, второй — третьим и так далее. Поэтому программисты строят алгоритмы так, чтобы записывать или удалять элементы массива с конца.❗❗❗
Мы не меняем индексы элементов вручную — движок делает это сам. Но ему тоже нужно время. Если в массиве миллион элементов, движок совершит миллион перестановок.
Используйте методы pop и push, а к shift и unshift прибегайте в крайнем случае.❗❗❗❗❗❗❗❗❗


✅
/* Добавление элементов. Метод concat */

🔶Метод concat применяется к массиву и создаёт из него новый. Все аргументы, переданные методу, будут добавлены в новый массив в том же порядке:

const toDoList = ['Посадить дерево', 'Построить дом'];
const toDoListUpdated = toDoList.concat('Вырастить сына');

console.log(toDoListUpdated);

// ["Посадить дерево", "Построить дом", "Вырастить сына"]


🔶Как аргумент можно передать и другой массив — его элементы будут скопированы и добавлены в новый массив:

const moscowAttractions = ['Кремль', 'Третьяковская галерея'];
const spbAttractions = ['Эрмитаж', 'Мариинский театр'];
const volgogradAttractions = ['Мамаев Курган', 'Родина-мать'];

const russiaAttractions = moscowAttractions.concat(spbAttractions, volgogradAttractions);

// получим новый массив со значениями всех исходных массивов

console.log(russiaAttractions);

/*
  [
    "Кремль",
    "Третьяковская галерея",
    "Эрмитаж",
    "Мариинский театр",
    "Мамаев Курган",
    "Родина-мать"
  ]
*/


🔶Метод concat не меняет структуру начального массива, а возвращает новый. Изменения в новом массиве не приведут к изменению исходного. Это делает код более предсказуемым.
















1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: