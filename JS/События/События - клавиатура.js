✅
/* События клавиатуры =====================================================*/


🔶Слушатель события — это объект внутри браузера, который ждёт, когда событие наступит. Как только это происходит, слушатель вызывает обработчик.

Клавиатурные события(Они полезны для работы с текстовыми полями): 
keydown, 
keypress  
keyup. 

/* Настройка обработчика события */

❗События клавиатуры генерируются только в <input>, <textarea> и в элементах со специальными атрибутам.

✏️ Пример написания:

{/* index.html */}

<input class="text-field" placeholder="Введите текст">

</input>


{/* script.js */}

const input = document.querySelector('.text-field');  

input.addEventListener('keydown', function () {
  console.log('Я возникаю, когда печатают в текстовом поле.');
});

❗Обработчик нажатия клавиши можно повесить и на весь документ:

document.addEventListener('keydown', function () {
    console.log('На что ни нажми — я появлюсь');
});



✅
{/* Отличие слушателя от обработчика =====================================*/}

Эти три события очень похожи, но есть отличия:
➡️keydown — «клавиша нажата». Сработает на любой клавише в тот момент, когда на неё нажмут. В таких случаях говорят, что клавиша «в нижнем положении»;
➡️keypress — «нажатие на клавишу». Тоже сработает при нажатии, но проигнорирует клавиши-модификаторы: alt, ctrl, shft и win — на Windows, и control, option, shift и command — на macOS.
keyup — «клавиша не нажата». Сработает на любой клавише, но только когда её отпустят.


✅
{/* Объект event для событий клавиатуры ==================================*/}

Объекте event. Он передаётся как параметр обработчику события, У разных событий — разное содержимое объекта event, потому что у каждого из них своя специфика:

const button = document.querySelector('button');

button.addEventListener('click', function (evt) {
  // объект события доступен как параметр

    console.log(evt); // его можно использовать в теле обработчика
});


{/* Определение клавиш ===================================================*/}

🔶То, какие клавиши пользователь нажимает на клавиатуре, — имеет значение. Так при вводе номера карты он должен писать только цифры. А если случайно введёт букву, пусть увидит сообщение об ошибке:

❗Для этого у event есть свойства key и keyCode. 
Первое хранит название нажатой клавиши, второе — её уникальный код.

✏️ Пример написания:

Сделаем валидацию:

<!-- index.html -->

<input id="input">
<div id="error" style="display: none"></div>


/* script.js */

const input = document.querySelector('#input');
const error = document.querySelector('#error'); // Блок с ошибкой изначально скрыт

input.addEventListener('keydown', function (evt) {
  // Проверяем, была ли введена цифра
    if (Number.isNaN(Number(evt.key))) {
    // Если пользователь ввёл не цифру, показываем блок с ошибкой
    error.style.display = 'block';
    };
});

❗Кроме названий у всех клавиш есть порядковые имена. Они хранятся в свойстве keyCode. Так у цифры 0 — номер 48, у цифры 9 — номер 57. Остальные находятся в этом диапазоне.

Исходя из этого валидацию можно переписать так:

const input = document.querySelector('#input');
const error = document.querySelector('#error'); // Блок с ошибкой изначально скрыт

input.addEventListener('keydown', function (evt) {
  // Проверяем, была ли введена цифра
    if (!(evt.keyCode <= 57 && evt.keyCode >= 48)) {
    // Если пользователь ввёл не цифру, показываем блок с ошибкой
    error.style.display = 'block';
    };
});











1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: