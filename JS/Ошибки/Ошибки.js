✅
/* Ошибки */

Failed to load resource: the server responded with a status of 403 ()


1️⃣Тип ошибки.
Reference error (ошибка ссылки) означает, что движок не смог найти переменную или функцию, к которой мы обращаемся. Типов ошибок довольно много. Основные рассмотрим позже.

2️⃣Сообщение ошибки.
Если тип ошибки даёт общую информацию, то сообщение — более конкретную, указывает, что именно произошло. Сообщение myVariable is not defined переводится как «переменная myVariable не объявлена».

3️⃣Путь ошибки.
Указывает, где произошла ошибка: название файла и номер строки. Ошибки бывают более сложными, и тогда их путь тоже становится сложнее. Этому посвятим отдельный урок.

Чтобы ошибки были информативными, нужно научиться их читать. Поначалу это может быть непросто, но со временем дойдёт до автоматизма. На первых порах спрашивайте себя:
➡️В каком файле и на какой строке произошла ошибка?
➡️Какой у ошибки тип?
➡️Что именно сломалось?



✅
/* Семь типов ошибок.*/

🔶В JavaScript есть семь типов ошибок.

1️⃣ Ошибка в синтаксисе: Syntax Error

Ошибка Syntax Error означает, что был нарушен синтаксис языка. Обычно такие ошибки вызваны тем, что пропущена скобка или точка с запятой поставлена в неположенном месте.


2️⃣Ошибка ссылки: Reference Error

Ошибка Reference Error возникает, если обратиться к необъявленной переменной или вызвать несуществующую функцию:


2️⃣Ошибка типизации: Type Error

Ошибка Type Error возникает, когда переменная используется не по назначению. Например, мы записали в неё строку, но пытаемся вызвать эту переменную как функцию.


❗Остальные типы ошибок тоже встречаются, но довольно редко.


✅
/* Логические ошибки и console.log*/

1️⃣Вывод значений в консоль: метод console.log

Можно выводить в консоль результат работы каждой функции и так понять, которая из них возвращает неправильный результат.

Метод console.log очень удобен, но и у него есть недостаток. Изменять код в больших проектах довольно долго. Чтобы оптимизировать сайт и сделать его кросс-браузерным, разработчики пропускают код через специальные программы. Но они работают долго, а ради каждого console.log не хочется ждать по пять минут. 





















1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 
🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: