✅
/* Оператор typeof */

🔶  Тип данных определяют оператором typeof. 

❗ В JavaScript данные делятся на:
- объекты, имеющие свойства пары: «ключ + значение»;
- примитивы (элементарные типы), у которых есть только значение.

❗Примитивных типов семь:
- строки (тип “string”);
- числа (тип “number”);
- булевы значения true и false (тип “boolean”);
- undefined (тип “undefined”);
- null (тип “null”);
- большие числа (тип “bigint”);
- символы (тип “symbol”).

typeof возвращает строку:

typeof 10; // "number"
typeof 'Hello World!'; // "string"
typeof true; // "boolean"
typeof undefined; // "undefined"

❗ typeof работает без скобок, но их ставят, когда нужно определить тип целого выражения:

typeof (10 + 5) // "number"
typeof 10 + 5 // "number5"

/* во втором случае сначала сработал typeof 10,
вернул строку "number", а оператор сложения произвёл
конкатенацию, и получилась строка "number5" */

❗Работа typeof выглядит простой и понятной, но есть 3 случая, когда результат работы typeof неочевиден:

typeof NaN; // "number". Да, "Not a Number" имеет тип данных "number".
typeof null; // "object". Это даже было признано официальным багом JavaScript. Его решили не исправлять, чтобы не сломать уже написанный код.
typeof function () {} // "function". Хоть такого типа и нет.

❗Помните об этих случаях, если решите использовать typeof в своём коде. Иначе можно спутать объект с null.


✅
/* Символы */



✅
/* undefined и null */















1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: