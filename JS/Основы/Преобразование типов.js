✅
/* Неявное преобразование типов */

1️⃣Приведение к строке
Неявное преобразование к строчному типу происходит при сложении со строкой:

1 + ''; // "1"
undefined + ''; // "undefined"


2️⃣Приведение к числу
Движок JavaScript приводит данные разных типов к числам, а затем их сравнивает:

null >= 1; // false
'451' < 452; // true


3️⃣Оператор «унарный плюс» приводит нечисловые значения после «+» к численному типу. Так +'33' вернёт число 33, +'-77' вернет число -77.
Если операторы сложения и унарный плюс стоят рядом, они не помешают друг другу:

console.log(67 + +'33'); // 100

❗Приведение к числу выполнит и любой другой арифметический оператор. Кроме сложения со строкой — оно будет воспринято как конкатенация:

console.log('3' - 1); // 2 — выполнилось приведение к числу
console.log('4' / 4); // 1 — тоже привелось к числу
console.log('2' * 2); // 4 — опять привелось
console.log('4' + 4); // 44 — а здесь выполнится конкатенация


4️⃣Приведение к булевым значениямв 

🔶В круглых скобках условия if любые данные всегда приводятся к логическому типу:

const usernameElement = document.querySelector('.username');

if (usernameElement) {
  console.log('Привет, ' + usernameElement.textContent);
}

❗Если элемента с классом username на странице нет, в переменную usernameElement запишется null. В круглых скобках условной конструкции null приводится к логическому типу и становится false. Поэтому тело условия if выполнено не будет.



✅
/* Явное преобразование типов */

1️⃣Приведение к строке

🔶Глобальный объект String превращает переданный ему аргумент в строку:

const numberToString = String(2); // "2"
const nanToString = String(NaN); // "NaN"
const undefinedToString = String(undefined); // "undefined"
const nullToString = String(null); // "null"
const booleanToString = String(true); // "true"


2️⃣Приведение к числу

🔶Глобальный объект Number приводит переданный ему аргумент к числовому типу:  

const stringToNumber = Number('2'); // 2
const nullToNumber = Number(null); // 0

❗Если передать произвольную строку или undefined, вернётся NaN.


3️⃣Приведение к булевым значениям

🔶Метод Boolean преобразует переданный ему аргумент к «булю»:

Boolean(2) // true
Boolean(0) // false
Boolean('') // false
Boolean('Непустая строка'); // true

Правдивые значения при приведении типа становятся Истиной, а ложные — Ложью. Правила такие:
все непустые строки — truthy,
пустая строка ('') — falsy,
все ненулевые числа — truthy,
ноль — falsy,
NaN, null и undefined — falsy,
объекты, массивы и функции — truthy.

Boolean('Непустая строка'); // true
Boolean(''); // false
Boolean(1); // true
Boolean(0); // false
Boolean(NaN); // false
Boolean(null); //false
Boolean(undefined); // false
Boolean({}); // true
Boolean([]); //true

❗Всё интуитивно пустое (ноль, NaN, null, undefined, пустая строка) приводится к false. Всё остальное — к true.











Symbols
1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷
 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания:
