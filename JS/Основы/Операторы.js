✅
/* Математические операторы */

Сложение +,
Вычитание -,
Умножение *,
Деление /,
Взятие остатка от деления %,
Возведение в степень **.


✅
/*  Операторы сравнения: */

console.log(7 > 6); // true — больше
console.log(7 < 6); // false — меньше
console.log(7 >= 6); // true — больше или равно
console.log(7 <= 6); // false — меньше или равно
console.log(7 === 6); // false — проверка на равенство
console.log(7 !== 6); // true — проверка на неравенство 


✅
/*Операторы добавочного присваивания */

= - Сохранение значения второго операнда в объект, указанный первым операндом (простое присваивание).
*= - Умножение значения первого операнда на значение второго операнда; сохранение результата в объект, указанный первым операндом.
/= - Деление значения первого операнда на значение второго операнда; сохранение результата в объект, указанный первым операндом.
%= - деление по модулю первого операнда на значение второго операнда; сохранение результата в объект, указанный первым операндом.
+= - Сложение значения первого операнда со значением второго операнда; сохранение результата в объект, указанный первым операндом.
-= - Вычитание значения второго операнда из значения первого операнда; сохранение результата в объект, указанный первым операндом.
<<= - Сдвиг значения первого операнда влево на количество битов, заданное значением второго операнда; сохранение результата в объект, указанный первым операндом.
>>= - Сдвиг значения первого операнда вправо на количество битов, заданное значением второго операнда; сохранение результата в объект, указанный первым операндом.
&= - Выполнение операции побитового И для значений первого и второго операндов; сохранение результата в объект, указанный первым операндом.
^= - Выполнение операции побитового исключающего ИЛИ для значений первого и второго операндов; сохранение результата в объект, указанный первым операндом.
|= - Выполнение операции побитового включающего ИЛИ для значений первого и второго операндов; сохранение результата в объект, указанный первым операндом.


✅
/* Операции НЕ, И, ИЛИ */

🔶Логическое НЕ делает из условия обратное: превращает true в false и наоборот. Для этого перед условием ставят восклицательный знак !:

✏️ Пример написания:

let merry = true;
console.log(!merry); // false

let christmas = false;
console.log(!christmas); // true

✏️ Пример написания:

!(3 > 2) === 3 <= 2; // true.

/* Потому что это превращается в проверку false === false */ 


🔴🔴🔴ФУНКЦИЯ ПРОВЕРКИ ПАРОЛЯ🔴🔴🔴

let password = 'JavaScript';

function checkPassword(pass) {
    if (!(pass === password)) {
        console.log('Неверный пароль');
        return;
    }

    console.log('Пароль правильный');
}

checkPassword('java script'); // 'Неверный пароль'
checkPassword('JavaScript'); // 'Пароль правильный'

❗Если поставить ! перед небулевым значением, движок JS сначала приведёт тип к булю, а затем изменит значение на противоположное:

!'Непустая строка' // false

❗Двойное отрицание сработает как перевод значения в логический тип:

!!true; // true
!!'непустая строка'; // true
!!''; // false
!!1; // true
!!0; // false



🔶 Логическое И - вернёт истину, только когда две булевы переменные истинны. Записывается эта операция с помощью двух амперсандов &&:

✏️ Пример написания:

let merry = true;
let christmas = false;

console.log(merry && christmas); // false


🔶Логическое ИЛИ служит для связи таких условий, из которых должно быть выполнено хотя бы одно. Для этого между простыми условиями ставят два прямых слеша ||:

true || false || false; // true

/* Оператору ИЛИ достаточно, чтобы хотя бы
одно простое условие было истинным */

✏️ Пример написания:

let merry = true;
let christmas = false;

console.log(merry || christmas); // true


❗❗❗Всё это позволяет записывать более сложные условия для инструкци❗❗❗

✏️ Пример написания:

let temperature = 36.6;

if (temperature > 36.3 && temperature <= 37.1) {
    console.log('Ваша температура в пределах нормы');
} else {
    console.log('Срочно обратитесь к врачу!');
} 

❗Значение по умолчанию

Часто оператором ИЛИ присваивают переменной значение по умолчанию:

function howDoYouDo(answer) {
    const result = answer || 'да ничего';
    return result;
}

howDoYouDo('всё прекрасно'); // "всё прекрасно"
howDoYouDo(); // "да ничего"

Пока вы не передаёте аргумент функции howDoYouDo, её вызов возвращает установленное по умолчанию значение 'да ничего'. Это происходит из-за того, что оператор ИЛИ из пустоты и чего-нибудь определённого выбирает определённое.


✅
/* Приоритетность операторов */

❗❗❗С логическими операторами ситуация схожая: сначала выполняется логическое НЕ, потом И, а затем — ИЛИ❗❗❗

const optimism = !'Жить' && !'Быть' || 'Жить и быть'; 

console.log(optimism); // "Жить и быть"

/* сначала выполняется !, потом &&, затем || */

❗❗❗Операции в скобках выполняются первыми❗❗❗

const pessimism = !'Жить' && (!'Быть' || 'Жить и быть'); 

console.log(pessimism); // false




1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 
🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: