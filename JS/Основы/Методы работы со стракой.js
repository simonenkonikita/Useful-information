✅Методы поиска в строке
/* Поиск по строке. Метод indexOf*/

🔶 Метод indexOf ищет символ в строке и возвращает его индекс: 

✏️ Пример написания:

/* Метод indexOf */

'Яндекс.Практикум'.indexOf('Я'); // 0

/* Если таких символов в строке несколько,
метод вернёт индекс первого из них: */

'эспрессо'.indexOf('c'); // 1

/* Если символа в строке нет, indexOf вернёт -1: */

'эспрессо'.indexOf('к'); // -1

🔶indexOf может найти и комбинацию символов. При этом вернётся индекс первого символа из последовательности:

✏️ Пример написания:

const blok = 'Ночь, улица, фонарь, аптека';
blok.indexOf('фонарь'); // 13

❗indexOf чувствителен к регистру❗


✅
/* Поиск по строке. Метод includes*/

🔶метод includes. Он выполняет проверку, которую мы только что делали вызовом indexOf:

✏️ Пример написания:

'Гарри Поттер и узник Азкабана'.includes('Гарри Поттер'); // true


✅
/* Поиск в начале и конце строки. Методы startsWith и endsWith*/

🔶Методы startsWith и endsWith — более узконаправленные альтернативы indexOf.

🔶Метод startsWith сравнивает начало строки с переданной ему подстрокой. Он отвечает на вопрос: «Эта строка начинается с вот такого набора символов?» Если ответ «да», метод возвращает true, иначе — false:

✏️ Пример написания:

'Вендетта'.startsWith('В'); // true
'Родина'.startsWith('Картинка в букваре'); // false

🔶Метод endsWith делает всё то же самое, только с концом строки. Он отвечает на вопрос: «Эта строка заканчивается вот таким набором символов?»:

✏️ Пример написания:

const theRealEnd = 'Это ещё не конец';

theRealEnd.endsWith('конец'); // true


✅Методы преобразования строк
/* Управление регистром. Методы toLowerCase и toUpperCase */

🔶Методы toLowerCase toUpperCase возвращают новую строку, все символы которой переведены в нижний и верхний регистр соответственно:

✏️ Пример написания:

'Включите Caps Lock'.toLowerCase(); // "включите caps lock"
'Выключите Caps Lock'.toUpperCase(); // "ВЫКЛЮЧИТЕ CAPS LOCK"

❗❗❗Полезно вызывать один из методов, когда нужно сравнить две строки без учёта регистра:

✏️ Пример написания:

const firstStr = 'Такая проверка не пройдёт';
const secondStr = 'таКая пРовеРка не пройдёт';

console.log(firstStr === secondStr); // false
console.log(firstStr.toLowerCase() === secondStr.toLowerCase()); // true


✅
/* Превращение строки в массив. Метод split*/

🔶Метод split принимает на вход один аргумент — разделитель. Он показывает, где заканчивается один элемент массива и начинается следующий. 

✏️ Пример написания:

'Пришёл. Увидел. Победил.'.split(' '); // ["Пришёл.", "Увидел.", "Победил."]
'Пришёл. Увидел. Победил.'.split('. '); // ["Пришёл", "Увидел", "Победил."]


✅
/* Преобразование массива в строку. Метод join */

🔶Метод join создаёт строку из элементов массива, разделённых запятой. Их порядок не меняется:

const bremenMusicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух'];

console.log(bremenMusicians.join());

// "Кот,Пёс,Трубадур,Осёл,Петух"

console.log(`Представляем музыкантов: ${bremenMusicians.join(', ')}`);
// "Представляем музыкантов: Кот, Пёс, Трубадур, Осёл, Петух"

// при этом с исходным массивом ничего не произошло:
console.log(bremenMusicians);
// ["Кот", "Пёс", "Трубадур", "Осёл", "Петух"]

❗Если не передать join аргумент, элементы в строке будут перечислены через запятую. Но мы можем задать любой нужный разделитель:

const bremenMusicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух'];

console.log(bremenMusicians.join(' | '));

// "Кот | Пёс | Трубадур | Осёл | Петух"


✅
/* Извлечение части строки. Метод slice*/

🔶Метод slice возвращает часть строки. На вход он принимает два аргумента — с какого индекса начинать отсчёт и на каком закончить:

✏️ Пример написания:

'Не прислоняться'.slice(6, 10); // "слон"

❌❌❌Второй аргумент необязательный: если его не указать, slice() вернёт все символы от заданного в первом аргументе до конца строки❌❌❌


✅
/* Извлечение части строки. Метод charAt*/

🔶Метод charAt() в JavaScript возвращает символ по указанному индексу в строке. 12 Позиция задаётся параметром метода (нумерация начинается с нуля). 






















Symbols
1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания:
