✅
/* Наборы */

🔶 Наборы позволяют задать группу символов и искать совпадения с одним из них. Например, искать сразу и букву «а», и «б»:

❗ Чтобы создать набор, нужно перечислить подходящие символы в квадратных скобках:

✏️ Пример написания:

const str = '14/03/2018';
const regex = /\d\d\W0[345]\W2018/g; // этот шаблон ищет все дни весны

str.match(regex); 


✅
/* Диапазоны */

🔶 Диапазоны позволяют указать промежуток доступных значений. Например, искать только цифры от 5 до 8 или только буквы от «М» до «Р».

❗Диапазон — часть набора. Это два символа, разделённых дефисом.

✏️ Пример написания:

const str = '20/04/2019';
const regex = /\d\d\W0[1-6]\W2019/g; // этот шаблон ищет все дни первого полугодия

str.match(regex); // [ "20/04/2019" ]

❗Диапазоны можно совмещать с наборами и другими диапазонами:

const regex = /[a-z0-9\-]/gi; // все латинские буквы, все цифры и дефис
const str = 'В Берлин я летал на boeing 737-800';

str.match(regex).join(''); // "boeing737-800"



✅
/* Кириллица */

❗буква «ё» исчезла. Дело в том, что в таблице символов она стоит обособленно от других кириллических букв. Поэтому, чтобы не терять «ё», дописывайте её в набор:спецсимвол \w — он ищет все латинские символы, цифры и нижние подчёркивания. Но с текстами, написанными кириллическими символами, он никак не помогает. Зато помогают наборы и диапазоны.


❗буква «ё» исчезнет. Дело в том, что в таблице символов она стоит обособленно от других кириллических букв. Поэтому, чтобы не терять «ё», дописывайте её в набор:

const regex = /[\wа-я\sё]/gi;

/* Ищем всю латиницу и всю кириллицу,
а от знаков препинания избавляемся. */

const str = 'Yandex 2020. Ещё не вечер!';

str.match(regex).join(''); // "Yandex 2020 Ещё не вечер" 

// Теперь «ё» не потерялась!


✅
/* Исключающие наборы и диапазоны */

У спецсимволов есть обратные классы — они ищут все те символы, которые их антагонист игнорирует.

У наборов и диапазонов тоже есть противоположности — исключающие наборы и диапазоны. Они ищут все символы, кроме тех, что мы им перечислим.

Чтобы сделать набор или диапазон исключающим, перед ним нужно поставить «шляпку» ^ (карет):

✏️ Пример написания:

const str = 'Оценки за четверть: 2 3 3 5 2 4 2 3 5';
const regex = /[^1-3]/g;

str.match(regex).join(''); // "Оценки за четверть:    5  4   5"

// картина стала получше, но большие пустоты выдают обман


❗Обратите внимание: если дефис просто стоит в регулярном выражении, движок не будет его искать. Сам по себе дефис спецсимволом не является.
❗Однако, если он стоит в наборе между двумя символами, движок начнёт воспринимать это не как набор трёх символов, а как диапазон:

/[ac-]/; // это набор из трёх символов: a, c и -
/a-c/; // это уже диапазон из трёх символов: a, b и с

Чтобы набор непредвиденно не превращался в диапазон, дефис нужно экранировать:

/a\-c/; // теперь это набор из a, c и -

❗всегда экранировать дефис в регулярных выражениях: так можно избежать ошибок. То же самое касается вот этих символов:

дефис -,
точка .,
плюс +,
круглые скобки (),
карет (шляпка) ^,
открывающая квадратная скобка [.





1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅
 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: