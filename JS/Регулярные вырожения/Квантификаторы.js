✅
/* Основные квантификаторы ================================= */

🔶 позволяют искать любое количество повторов.

_
✅
/* От одного до бесконечности повторений — квантификатор + */

квантификатор +. Если поставить плюс после символа, движок ищет все слова, где этот символ встречается один раз или больше:

const str = 'Правильно писать «свиной», с одной «н»';
const regex = /свин+ой/;

// такое регулярное выражение найдёт оба варианта: и с «н», и с «нн»

str.match(regex); // [ "свиной" ]


✅
/* От нуля до бесконечности повторений — квантификатор '*' */

Звёздочку же устраивает и полное отсутствие того символа, который перед ней стоит. То есть если звёздочка стоит после символа, этого символа в найденной строке может вовсе не быть:

const exc = 'экскаватор';
const esc = 'эскалатор';
const regex = /эк*ска[вл]атор/; // буква "к" может встречаться, а может и не встречаться

exc.match(regex); // [ "экскаватор" ]
esc.match(regex); // [ "эскалатор" ]


✅
/* Необязательный символ — квантификатор ? */

Ещё один способ сделать символ необязательным: квантификатор ?. Если звёздочка приемлет от нуля до бесконечности символов, то знак вопроса строже — его устраивает лишь 0 и 1: либо есть один символ, либо его нет вообще.

/* делает букву u необязательной и будет искать
оба варинта написания favourite и favorite. */

const regex = /favou?rite/g;
const    str = 'favourite for favorite';

str.match(regex); // ["favourite", "favorite"]


✅
/* Контроль повторов — квантификатор {} */

➡️Для поиска набора повторяющихся символов мы перечисляли их подряд в регулярном выражении:

const regionCode = /\d\d\d/;
const    phoneNumber = 'Мой номер телефона: +7(999)123-12-21';

phoneNumber.match(regionCode); // [ "999" ]

➡️Квантификатор {} позволяет этого избежать. После символа можно поставить фигурные скобки и указать в них, сколько повторений этого символа мы хотим найти:

const regionCode = /\d{3}/;
const    phoneNumber = 'Мой номер телефона: +7(999)123-12-21';

phoneNumber.match(regionCode); // [ "999" ]

➡️Можно также указывать не точное количество повторений, а диапазон. Например, когда нас устроит от 2 до 5 повторений:

const str = 'столько, стооолько и вот стооооооооолько';
const regex = /сто{2,5}лько/;

str.match(regex); // [ "стооолько" ]

// в слове "стооооооооолько" повторов "о" больше 5

➡️Верхнюю границу числа повторений можно не указывать: например, можно искать от 5 до бесконечности. В таких случаях просто не пишите в фигурных скобках второе число. Но запятую ставьте — она нужна.

const someSymbol = /a{1,}/g;
const    str = 'alohaa';

console.log(str.match(someSymbol)); // ["a", "aa"]


Имя	Ищет
+	от одного до бесконечности совпадений с символом подряд.
*	от нуля до бесконечности совпадений с символом подряд.
?	от нуля до одного совпадений с символом.
{}	точное количество совпадений или диапазон совпадений с символом подряд.





1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅
 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: