✅
/* Способ обращения 1, через точку ======================================*/

🔶Чтобы получить доступ к свойству, его имя записывают через точку после имени объекта:

✏️ Пример написания:

const obj = {
  one: 1,
};

console.log(obj.one); // 1

❗Если обратиться к несуществующему ключу, будет console.log(obj.four); // undefined 


✅
/* Способ обращения 2, через квадратные скобки [] =======================*/

🔶Другой способ обратиться к свойству — указать имя свойства в кавычках и в квадратных скобках:

obj['one'];

❗В большинстве случаев ключ в объекте — строка. 
❗ Она может начинаться с цифры, содержать пробелы и другие символы, запрещённые в именах переменных. 
❗ Если ключ не удовлетворяет правилам именования переменных, его нужно брать в кавычки(❌❌❌Обратиться к такому свойству через точку не получится)

✏️ Пример написания:

const obj = {
  simpleName: true,
  'как хочу, так и называю': true,
  '123anarchy!!!': true
};

❗Тогда надо делать обращение к свойству через квадратные скобки. В них нужно передать значение ключа строкой, то есть в кавычках:

const obj = {
  simpleName: true,
  'как хочу, так и называю': true,
  '123anarchy!!!': true
};

obj['как хочу, так и называю']; // true
obj['123anarchy!!!']; // true


✅
/* Способ обращения 3, Ключ-переменная ==================================*/

🔶Особенность обращения через скобки — в них можно передать переменную:

const obj = {
  one: 1
};

const key = 'one';

console.log(obj[key]); // 1

❗Это удобно, если имя ключа неизвестно на момент написания кода. Например, мы вычисляем его в процессе:

const obj = {
  'добро пожаловать': 'или посторонним вход воспрещён'
};

const part1 = 'добро';
const part2 = 'пожаловать';

const key = `${part1} ${part2}`;

console.log(obj[key]); // "или посторонним вход воспрещён"

❗Или если мы не знаем имени ключа — например, получаем его от пользователя:

const obj = {
  red: '#f00',
  green: '#0f0',
  blue: '#00f',
};

const key = prompt('red, green или blue?'); // пользователь вводит, например, red

console.log(obj[key]); // "#f00"

Если в этом примере обратиться к свойству key через точку: obj.key, будет undefined. Обращение к свойству вложенного объекта через квадратные скобки аналогично обращению через точку.

const birthday = {
  anya: {
      month: 'февраль',
      day: 12
  }    ,
  lena: {
      month: 'июль',
      day: 29
  }
};

console.log(birthday.anya.month); // "февраль"

// а теперь зададим новый месяц рождения Ани двумя переменными

let x = 'anya';
let y = 'month';

birthday[x][y] = 'мартобрь';

console.log(birthday.anya.month); // 'мартобрь'




















1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 0️⃣ #️⃣ 🔣 ◀️ ⬇️ ▶️ ⬅️ 🔠 🔡 🔤 ↙️ ↘️ ➡️➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ 🔽 ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ 🔼 🔃 🔄 ⏪ ⏩ ℹ️ 🆗 🔀 🔁 🔂 🆕 🔝 🆙 🆒 🆓 🆖 🎦 🈁 📶 🈹 🈴 🈺 🈯 🈷️ 🈶 🈵 🈚 🈸 🈳 🈲 🈂️ 🚻 🚹 🚺 🚼 🚭 🅿️ ♿ 🚇 🛄 🉑 🚾 🚰 🚮 ㊙️ ㊗️ Ⓜ️ 🛂 🛅 🛃 🉐 🆑 🆘 🆔 🚫 🔞 📵 🚯 🚱 🚳 🚷 🚸 ⛔ ✳️ ❇️ ✴️ 💟 🆚 📳 📴 💹 💱 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔯 ❎ 🅰️ 🅱️ 🆎 🅾️ 💠 ♻️ 🔚 🔙 🔛 🔜 🕐 🕜 🕙 🕥 🕚 🕦 🕛 🕧 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 💲 ©️ ®️ ™️ ❌ ❗❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ 💮 💯 ✔️ ☑️ 🔘 🔗 ➰ 〰️ 〽️ 🔱 ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ 🔲 🔳 ⚫ ⚪ 🔴 🔵 🔷 🔶 🔹 🔸 🔺 🔻
✏️ Пример написания: