/* ОСНОВНЫЕ КОМАНДЫ */
pwd - узнать, где вы сейчас
ls - содержимое текущего каталога
cd  имя_папки - переходим в папку /* Если в названии папки есть пробелы, используйте кавычки: cd "Рабочий стол"/ можно использовать вложенность cd first-project/html  */
cd .. -  перейди на уровень выше в родительскую папку
cd ~ - перейди в домашнюю директорию
cp - копирование файлов
mv - перемещение файлов
cat - просмотр содержимого файлов (только к текстовым документам) 
cat -n - просмотр содержимого файлов, пронумеровав строки
cat -s - просмотр содержимого файлов, удалив повторяющиеся строки
git commit --amend - добавить изменения к старому коммиту
git remote set-url <существующее-удаленное-имя> <url> - изменить адрес удаленного репозитария 

/* Вернуться к последнему коммиту */
git reset - вернуться к последнему коммиту
git reset HEAD - /* радикальный способ откатиться: git reset HEAD. Этот подход не затрагивает файлы, с которыми вы работаете. Если файл был изменён или добавлен, но не переведён в staged, сброс изменений этот файл не затронет.
Но файлы, находящиеся в staged, будут оттуда удалены — они будут помечены как неотслеживаемые. Все эти файлы вернутся в то состояние, в котором они пребывали при последнем коммите. */

git reset --hard "номер коммита последнии 7 цифр"- команда удаляет вообще все изменения: и из staged, и из рабочей зоны. После неё вернуть изменения не выйдет.

/* Просмотр изменений: git diff */
git diff - показывает  изменения: что было сделано и в каких файлах до поподания в stage 
git diff --staged - Чтобы посмотреть изменения, добавленные в stage
git log --oneline - Сравним два последних коммита


/* Работа с папками и файлами*/
mkdir имя_папки - создает папку
mkdir -p fonts создает папку с коталог до нее через /
touch имя_файла -  создает файл /* touch index.html # создаст файл index.html в текущей папке / создать несколько файлов - touch index.html style.css script.js*/
rm имя_файла - удаление файла
rmdir имя_файла - удаление папки
rm -r имя_файла - принудительно удалить папку со всем ее содержимым


/* Настройка Git */
1. git config с опцией --global - указать в Git Bash ваше имя и адрес электронной почты:

/* git config --global user.name "Stas Basov" 
# вводите своё имя или ник латиницей и в кавычках

git config --global user.email "stasbasov@yandex.ru"
# здесь нужно ввести свой реальный e-mail  */

2. git config с опцией --list - проверьте, что получилось (список всех свойств конфига )
/* git config --list */

/* В ответ командная строка покажет ваши настройки:
user.name=Stas Basov
user.email=stasbasov@yandex.ru  */

3. git config --global - если нужно просмотреть или изменить настройки «Гита»


/* Подключаем Git к проекту и делаем коммиты*/

git init - сделать папку  git-репозиторием
git status - проверить работу git-репозитория
git add имя_файла - сохранять версии файла
git add --all или git add -A - сохранить состояние всех файлов

 - сделать коммит
git log - показать историю коммитов




/* Привязка локального и удалённого репозиториев */

git remote add - привязать удалённый репозиторий к локальному
/* git remote add origin имя удалённого репозитория и его адрес (из вкладки SSH) приме: git remote add origin git@github.com:YandexPracticum/first-project.git */

git remote -v # смотрим текущие ссылки на удаленный репозиторий
/* origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
origin  git@github.com:USERNAME/REPOSITORY.git (push)
Change your remote URL from SSH to HTTPS with the git remote set-url command. */

git remote set-url origin https://github.com/USERNAME/REPOSITORY_NEW.git
/* Verify that the remote URL has changed. */

# проверяем результат
git remote -v  # смотрим текущие ссылки на удаленный репозиторий
/* origin  https://github.com/USERNAME/REPOSITORY_NEW.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY_NEW.git (push) */




git branch -M main - переименовать локальную ветку в main

git push -u origin main - загрузить код на «Гитхаб»
git pull - забрать сделанные изменения с «Гитхаб»
git clone - клонирование репозитория /*git clone имя удалённого репозитория и его адрес (из вкладки SSH) */

.gitkeep - добавить пустую папку в коммит, создайте в ней пустой файл с именем .gitkeep


















/* Ветки */
git checkout feature/header - создание новой ветки "feature/header"
git checkout -b feature/header - или сокращеннои сразу перейти в нее
git merge feature/header -  объединить, или «смёрджить» ветки, сначала нужно перейти в ту ветку к которой хотим присоединить другую, в главвную, при помощи команды:
git checkout main -  переключиться в ветку main ()
git branch -D название_ветки - удалить ветку. Чтобы всё прошло хорошо, нужно переключиться из удаляемой ветки.