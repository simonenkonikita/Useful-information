/* Проверка наличия SSH-ключа */

1. cd ~  - переход в домашнюю директорию
2. ls -la .ssh/ - вывести список созданных ключей или добавить команде пару параметров: ls -lAFho .ssh/ 

/* Если папка пустая или её нет, то всё хорошо. 
Если есть файлы с похожим названием, SSH-ключи уже создавались:
id_dsa.pub
id_ecdsa.pub
id_ed25519.pub
id_rsa.pub
Если вы не создавали их, удалите все эти файлы. */

1. Генерация SSH-ключа.
ssh-keygen -t ed25519 -C "e-mail который привязан к «Гитхабу»" - генерация SSH-ключа
ssh-keygen -t rsa -b 4096 -C "e-mail который привязан к «Гитхабу»" - генерация SSH-ключа, если система не поддерживает алгоритм шифрования ed25519

/* После ввода отобразится сообщение:
    > Generating public/private rsa key pair. */

2. Укажите место хранения ключей.
/* Простой вариант — сделать домашний каталог пользователя путём по умолчанию. Для этого нажмите Enter:     
> Enter a file in which to save the key (C:\Users\<имя_пользователя>\.ssh\):[Press enter]
     */

3. Создайте пароль доступа к SSH-ключу.
/* Когда вы будете вводить пароль, символы не будут появляться на экране, но на самом деле пароль при этом вводится. Но вы можете оставить поле пустым, чтобы никогда не вводить пароль. Для этого нажмите Enter: */

4. Запустите фоном команду ssh-agent. Она ищет SSH-ключ на вашем компьютере:
eval $(ssh-agent -s)

5. Привяжите приватный ключ к ssh-agent.
Выбор команды зависит от алгоритма шифрования
для ed25519:
ssh-add ~/.ssh/id_ed25519
для rsa:
ssh-add ~/.ssh/id_rsa

 
/* Привязка SSH-ключа к аккаунту GitHub */
1. Скопировать содержимое ключа в буфер обмена
    для ed25519:
    clip < ~/.ssh/id_ed25519.pub
    для rsa:
    clip < ~/.ssh/id_rsa.pub
    /*   Если clip не сработает, найдите скрытую папку .ssh, откройте файл id_rsa.pub или id_ed25519.pub в любом текстовом редакторе. Скопируйте его содержимое в буфер обмена. */

2. Перейдите на «Гитхаб» и откройте настройки аккаунта:
Перейдите в настройки аккаунта -  SSH and GPG keys - New SSH key or Add SSH key - В поле "Title" напишите заголовок. Например, ″Personal key″.
В поле ″key″ скопируйте ваш ключ из буфера обмена: Нажмите кнопку ″Add SSH key″.


/* Привязка локального и удалённого репозиториев */

git remote add - привязать удалённый репозиторий к локальному
/* git remote add origin имя удалённого репозитория и его адрес (из вкладки SSH) пример: git remote add origin git@github.com:YandexPracticum/first-project.git */
git branch -M main - переименовать локальную ветку в main

git push -u origin main - загрузить код на «Гитхаб»
git pull - забрать сделанные изменения с «Гитхаб»
git clone - клонирование репозитория /*git clone имя удалённого репозитория и его адрес (из вкладки SSH) */

.gitkeep - добавить пустую папку в коммит, создайте в ней пустой файл с именем .gitkeep


/* Загрузка исходников в GitHub */
Лучше использовать Git из терминала


1.Создаем публичный репозиторий в GitHub

GitHub покажет вам список команд, которые нужно ввести в терминал. Вот их список:
git init
git remote add origin [адрес вашего репозитория]
git add .
git commit -m "first commit"
git branch -M main
git push -u origin main

Перевод 
Создай репозиторий в этой папке
Добавь ссылку на адрес репозитория в GitHub, чтобы отправлять код
Сохрани файлы для отправки на GitHub
Зафиксируй это обновление и назови "first commit"
Сделай главной веткой в репозитории ветку с именем main
Отправь все зафиксированные изменения в GitHub 

Теперь вы сможете отправлять изменения в GitHub со своего компьютера через терминал. А это, в свою очередь, открывает вам возможности автоматизации.
