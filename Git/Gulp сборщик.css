/* Сборщики */
/* Сборщик Gulp, но есть и другие */

npm install -g gulp - устанавливаем сборщик, сначала в терминале ПК, глобально, на весь компьютер. Это нужно, чтобы могли просто писать в терминал команды Gulp и они выполнялись.

npm install gulp --save-dev -установка сборщика внутрь проекта как devDependencies, чтобы могли запускать эти команды скриптом из файла package.json.

const gulp = require('gulp'); -  в файл настроек нужно подключить все функции, которые предоставляет Gulp. Это делает строчка в файле gulpfile.js:

/* Для работы Gulp нужно создать файл: */
gulpfile.js -  в корне проекта. 
Вся конфигурация Gulp будет лежать в файле gulpfile.js в корне проекта.

/* список популярных плагинов gulp */
gulp-concat-css — он умеет склеивать CSS-файлы в один;
browser-sync — позволит сделать сервер с режимом просмотра результатов в реальном времени;
gulp-plumber — плагин, который производит сборку, даже если в коде есть ошибки (как минимум пытается собрать этот код);
del — умеет удалять файлы и папки. Он нам нужен, чтобы при удалении чего-то из исходников, файлы удалялись и из сборки. С ним есть особенность. Мы возьмём его конкретную версию 6.0.0. На момент написания статьи с более поздними версиями происходят баги.

Команда для установки этих плагинов
npm i browser-sync --save-dev
npm i del@6.0.0 --save-dev
npm i gulp-concat-css --save-dev
npm i gulp-plumber --save-dev build 



/* Описываем задачу для gulp в файле gulpfile.js:*/

1.Задача - копирования HTML-файлов из src/ в dist/  */

function html() {
  return gulp.src('src/**/*.html') - /* нужно описать, что делает функция и указать путь, откеуда Gulp должен брать файл*/
            .pipe(plumber()) -  /* Чтобы избежать ошибок при сборке */
                 .pipe(gulp.dest('dist/')) /* нужно описать, куда Gulp должен донести файл*/ 
}

exports.html = html  - /* строчка, которая позволит вызвать эту задачу из терминала  */

2.Задача -Склеивание и сборка CSS */

function css() {
    return gulp.src('src/blocks/**/*.css')
          .pipe(plumber())
          .pipe(concat('bundle.css'))
                  .pipe(gulp.dest('dist/'))
  }
  
  exports.css = css;

  
  
3.Задача - Изображения

function images() {
    return gulp.src('src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}')
              .pipe(gulp.dest('dist/images'))
  }
  
  exports.images = images;

/*   .pipe(plumber()) - можно не указывать для файлов которые не меняются, к примеру изображения!!! */



4.Задача - Очистка папки dist/ 
Перед каждой сборкой полезно удалить все файлы из папки dist/ и загрузить туда новые результаты

function clean() {
    return del('dist');
  }
  
  exports.clean = clean;


5.Сборка одной командой

Для этого есть два метода: 
series() — выполняет задачи по очереди
parallel() — выполняет задачи параллельно

/* Создаем задачу  */
gulp build в терминале

const build = gulp.series(clean, gulp.parallel(html, css, images));
exports.build = build; 

6.Отслеживание изменений в файлах

Метод -
watch() - функция, способная следить за изменениями.

function watchFiles() {
    gulp.watch(['src/**/*.html'], html);
    gulp.watch(['src/blocks/**/*.css'], css);
    gulp.watch(['src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}'], images);
  }

7.Параллельное выполнение build и отслеживания:

function watchFiles() {
    gulp.watch(['src/**/*.html'], html);
    gulp.watch(['src/blocks/**/*.css'], css);
    gulp.watch(['src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}'], images);
  }
  const watchapp = gulp.parallel(build, watchFiles);
  
  exports.watchapp = watchapp;

8.Сервер - изменения папки dist/ в реальном времени в браузере. 

function serve() {
    browserSync.init({
      server: {
        baseDir: './dist'
      }
    });
  }

  После добавления функции в каждой задаче сборки — функциях html(), css() и images() —нужно добавить такие пайпы: .pipe(browserSync.reload({stream: true}));. 

9.Функцию serve нужно выполнять параллельно в задаче watchapp, и сервер заработает в режиме реального времени.

const watchapp = parallel(build, watchFiles, serve); 

10.Чтобы стало совсем хорошо, можете добавить в конец gulpfile.js строчку

exports.default = watchapp;

Теперь функция watchapp будет вызываться из терминала просто по команде gulp.


11.Пульт управления


/* Готовый конфиг Gulp */

const gulp = require('gulp');
const concat = require('gulp-concat-css');
const plumber = require('gulp-plumber');
const del = require('del');
const browserSync = require('browser-sync').create();

function serve() {
  browserSync.init({
    server: {
      baseDir: './dist'
    }
  });
}

function html() {
  return gulp.src('src/**/*.html')
        .pipe(plumber())
				.pipe(gulp.dest('dist/'))
        .pipe(browserSync.reload({stream: true}));
}

function css() {
  return gulp.src('src/blocks/**/*.css')
        .pipe(plumber())
        .pipe(concat('bundle.css'))
				.pipe(gulp.dest('dist/'))
        .pipe(browserSync.reload({stream: true}));
}

function images() {
  return gulp.src('src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}')
    .pipe(gulp.dest('dist/images'))
    .pipe(browserSync.reload({stream: true}));
}

function clean() {
  return del('dist');
}

function watchFiles() {
  gulp.watch(['src/**/*.html'], html);
  gulp.watch(['src/blocks/**/*.css'], css);
  gulp.watch(['src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}'], images);
}

const build = gulp.series(clean, gulp.parallel(html, css, images));
const watchapp = gulp.parallel(build, watchFiles, serve);

exports.html = html;
exports.css = css;
exports.images = images;
exports.clean = clean;

exports.build = build;
exports.watchapp = watchapp;
exports.default = watchapp;


